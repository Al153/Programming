List of all snippets and their functions (hopefully)


Default
	- Runtime
		- " setup routines "
			- no arguments
			- 
		- " function call routine "
			- "Push args" - Code to push arguments of th called function onto the expression stack
			- "Call_address" - Address label of the function to be called
			-
		- " function startup routine "
			- "function_name" - name of this function
			- "new_length" - length of the local variables of this function
			- "get_parameters" - code to pop this argument\'s aruments off of the expression stack
			-
		- " return routine "
			- no arguments
			-
		- " while loop code "
			- "number" - keeps track of which loop this is, so jumps go to the right labels
			- "Calculate_condition" - the condition expression which is executed with each iteration
			- "Popgp0" - gets the condition expression result into gp0 
			- "looped_code" - the statements which are repeated multiple times
			-
		- " for loop code "
			- "assignment1" - the preliminary assignment that occurs once
			- "number" - keeps track of which loop this is, so jumps to right label
			- "Calculate_condition" - the condition which is evaluated at the start each iteration
			- "Popgp0" - gets result of condition evaluation into gp0
			- "assignment2" - the internal assignment that takes place at the end of eac iteration
			- 
		- " if statement code "
			- "Calculate_condition" - condition expression which is evaluated with each iteration
			- "Popgp0" - gets result of evaluation into gp0
			- "number" - used to keep track of which if this is and where to jump
			- "conditional_code" - code that is executed if the condition is true
			- 
		- " if-else statement code "
			- "Calculate_condition" - conditional expression which controls the program flow here
			- "Popgp0" - gets result of condition evaluation into gp0
			- "number" - keeps track of which if this is and where jumps go to
			- "false_code" - code exected if the condition is false
			- "true_code" - code executed if the condition is true
		- "Popgp0"
			- no arguments
			-
		- "Popgp1"
			- no arguments
			-
		- "Popindex"
			- no arguments
			-
		- "Pushgp0"
			- no arguments
			-	
		- " load "
			- "absolute_address" - the address of the variable with respect to the stack pointer
			- "Pushgp0" - stores to the stack
			- Loads a single signed or unsigned integer variable onto the stack
			- optimiser can change this to a load to a register
			- loads the integer at an address relative to the stack frame onto the expression stack
			-
		- " load relative "
			- "get_index" - code to place an indexing value into gp6
			- "absolute_address" - address to be indexed (address[get_index])
			- Loads a single signed or unsigned int from an indexed address relative to the stack frame onto the expression stack
			-
		- " store "
			- "Popgp0" - gets top of stack into gp0
			- "absolute_address" - address relative to the stack pointer for the data to be stored into
			- stores a single integer from the expression stack to an address relative to the stack frame
			-
		- " store relative "
			- "get_index" - code to place the indexing value into gp6
			- "Popgp0" - ges top of stack into gp0
			- "absolute_address" - address relative to stack pointer which derefenced to become a pointer
			- stores a single integer from the expression stack into an address pointed to by a variable relative to he stack frame which ish indexed by and indexing expression7
			-
		- " load char "
			- "absolute_address" - the address of the variable with respect to the stack pointer
			- "Pushgp0" - stores to the stack
			- Loads a single signed or unsigned integer variable onto the stack
			- optimiser can change this to a load to a register
			- loads the char at an address relative to the stack frame onto the expression stack
			-
		- " load relative char "
			- "get_index" - code to place an indexing value into gp6
			- "absolute_address" - address to be indexed (address[get_index])
			- Loads a single char from an indexed address relative to the stack frame onto the expressions stack
			-
		- " store char "
			- "Popgp0" - gets top of stack into gp0
			- "absolute_address" - address relative to the stack pointer for the data to be stored into
			- stores a single char from the expression stack to an address relative to the stack frame
			-
		- " store relative char "
			- "get_index" - code to place the indexing value into gp6
			- "Popgp0" - ges top of stack into gp0
			- "absolute_address" - address relative to stack pointer which derefenced to become a pointer
			- stores a single char from the expression stack to an the address pointed to by the value at address relative to the stack frame indexed by an indexing expression
			-
		- " load global "
			- "absolute_address" - the address of the variable with respect to the stack pointer
			- "Pushgp0" - stores to the stack
			- Loads a single signed or unsigned integer variable onto the stack
			- optimiser can change this to a load to a register
			- loads the integer at an absolute_address onto the expression stack
			-
		- " load relative global "
			- "get_index" - code to place an indexing value into gp6
			- "absolute_address" - address to be indexed (address[get_index])
			- Loads a single signed or unsigned int from an indexed address contained by an absolute address onto the expression stack
			-
		- " store global "
			- "Popgp0" - gets top of stack into gp0
			- "absolute_address" - address relative to the stack pointer for the data to be stored into
			- stores a single integer from the expression stack to an absolute address
			-
		- " store relative global "
			- "get_index" - code to place the indexing value into gp6
			- "Popgp0" - ges top of stack into gp0
			- "absolute_address" - address relative to stack pointer which derefenced to become a pointer
			- stores a single integer from the expression stack into an address pointed to by an absolute addressed variable which is indexed by an indexing expression7
			-
		- " load char global "
			- "absolute_address" - the address of the variable with respect to the stack pointer
			- "Pushgp0" - stores to the stack
			- Loads a single signed or unsigned integer variable onto the stack
			- optimiser can change this to a load to a register
			- loads the char at an absolute address onto the expression stack
			-
		- " load relative char global "
			- "get_index" - code to place an indexing value into gp6
			- "absolute_address" - address to be indexed (address[get_index])
			- Loads a single char from an indexed absolute address onto the expressions stack
			-
		- " store char global "
			- "Popgp0" - gets top of stack into gp0
			- "absolute_address" - address relative to the stack pointer for the data to be stored into
			- stores a single char from the expression stack to an absolute address
			-
		- " store relative char global"
			- "get_index" - code to place the indexing value into gp6
			- "Popgp0" - ges top of stack into gp0
			- "absolute_address" - address relative to stack pointer which derefenced to become a pointer
			- stores a single char from the expression stack to an the address pointed to by the value at an absolute address indexed by an indexing expression
			-
		- " get index integer "
			- "index expr" - expression which calculates index
			- "pop index" - code to pop off of the stack and into gp6 (the index register)
			-
		- " get index char "
			- "index expr" - expression which calculates index
			- "pop index" - code to pop off of the stack and into gp6 (the index register)
			-		
		- " get index general "
			- "index expr" - expression which calculates index
			- "pop index" - code to pop off of the stack and into gp6 (the indsex register)
			- "size" - byte width of the data stucture being indexed
			-
		- " cast int to char "
			- "Popgp0" - Pops off expression stack into gp0
			- "Push gp0" - after conversion, push back onto stack
			- 
		- " cast char to int"
			- no arguments
			-
		- " get ptr "
			- "absolute_address" - absolute address of the variable relative to the stack frame
			- "Push gp0" - pushes the ptr value onto the expression stack
		- " get ptr global "
			- "absolute_address" - address (name) of the variable to get a pointer of 
			- "Push gp0" - pushes value onto the expression stack
	- Arithmetic
		- Almost all have the typical arguments:
			- "getgp0" - pops off expression stack to gp0
			- "getgp1" - pops off expression stack to gp1
			- "storegp0" - pushes gp0 to expression stack
		- " ADD "
			- ADDS top two values on stack, with no carry. treated as unsigned ints
		- " SUB "
			- ADDS top two values on stack, with no borrow treated as unsigned ints
		- " SHR "
			- does a SHR with 
		- " SHL "
			-
		- " ADD char "
			-
		- " SUB char "
			-
		- " SHR char "
			-
		- " SHL char "
			-
		- " MUL "
			-
		- " DIV "
			-
		- " MOD "
			-
		- " AND "
			-
		- " OR "
			-
		- " XOR "
			-
		- " MUL char "
			-
		- " DIV char "
			-
		- " MOD char "
			-
		- " AND char "
			-
		- " OR char "
			-
		- " XOR char "
			-
		- " NOT "
			-
		- " UNARY SUB "
			-
		- " NOT char "
			-
		- " UNARY SUB char "
			-





	- Comparison and Boolean
	- Floating Point
