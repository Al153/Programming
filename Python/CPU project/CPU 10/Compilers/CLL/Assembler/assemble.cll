// code to take assembly language, assemble it into AIF (assembler intermediate form) and then render that form into memory and execute it



#include STD:allocation.cll
#include STD:hashTable.cll
#include STD:set.cll

#include Loader.cll
#include tokeniser.cll
#include assembler_back_end.cll
#include lookups.cll


#define EXECUTE 1
#define DUMP 2
void assemble(@char source_text, int mode)
	init();
	@int tokens = parse(source_text);
	second_pass(tokens);
	@int AIF = generate_intermediate(tokens);

	if (mode == EXECUTE) then 
		Load(AIF,END_OF_PROGRAM); //need to look into output to find a way to calculate end of program - failing that we can just produce a large array to write to
	endif;
end;