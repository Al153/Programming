//some of the tools used by the assembler



@int definedDict; 			//global vars
@int variableDict;

@int registerDict;
@int instructionDict;
@int flagDict;
@int literals_set;


void init()
	malloc_init();
	definedDict = newDict("ROOT","ROOT");
	variableDict = newDict("ROOT","ROOT");
	//init_registerDict();  //might rearrange so initialised when needed
	//init_instructionDict();
	//init_flagDict();
	init_literals();
end;


@int parse(@char source_text)
	printf("Parsing\n");
	@int top = tokenise(source_text);
	@int line;
	@int previous_line = @top;
	print_tokens(top);



	//generates a tree form for code
	//line object <--> token <--> token <--> token -->|
	//    ||
	//   ||
	//   \/
	//line object <--> token <--> token <--> token -->|
	//	||
	//	||
	//	\/
	//	__ 
	//checks for definitions and intLiterals
	// if a definition, then it should delete line and add definition to the defined dictionary
	// int literal, just add a variable definition at the top of the code
	// expands goto macro
	for (line = top, line != 0, line = line[0])
		//check for comments
		remove_comments(line,previous_line);
		line = previous_line[0];
		//check_char_literals(line);
		check_int_literals(line);
		scan_definitions(line,previous_line);




		previous_line = line;
	loop;
	return top;
end;

void second_pass(@int tokens)
	//tries to replace all tokens from dictionary
	// reorders if .. then ..s to ... if ...
	// checks for labels - creates label variables too - add direct to dict
	// checks for variables - add to dict
	// adds line types
	// adds line sizes
	pass;
end;

@int generate_intermediate(@int tokens)
	// takes a token list
	// renders into machine code fragments (line by line)
	// replaces variables and adds line numbers (generates addresses)
	// places offsets
	// deallocates token tree
	pass;
end;


void remove_comments(@int line, @int previous_line)
	//scans line's tokens looking for hashtags which aren't in '', if found then removes as comment
	@int token;
	int state =0;
	for (token = line[1], token, token = token[0])
	//	if (token[3] == 1) then 		//only looks at tokens of length 1
			@char character = token[2];
			if (character[0] == '\'') then state ^= 1;
			else if (character[0] == '#') then
					if (state == 0) then 			//if not a literal and a # is found then remove the # and anything after it
						if (token[1]) then 			//if not the first token in line
							token = token[1];
							@int new_token = token[0];
							token[0] = 0;
							while (new_token) do
								dalloc(new_token);
								new_token = new_token[0];
							loop;
						else
							previous_line[0] = line[0];
							dalloc(line);
							while (token) do 
								dalloc(token);
								token = token[0];
							loop;
						endif;
					endif;
				endif;
			endif;
	//	endif;
	loop;
end;

void check_int_literals(@int line)
	@int token;
	@int state = START;
	for (token = line[1], token, token = token[0])
		@char text = token[2];
		if (text[0] == '@') then
			@int next_token = token[0];
			if (token) then
				setInsert(literals_set,intify(next_token[2],next_token[3]));
				token[3] = 1 + next_token[3]; //merge tokens into token
				token[0] = next_token[0];
				next_token = token[0];
				next_token[1] = token;
			else
				printf("SYNTAX ERROR: @ at the end of a line\n");
				quit();
			endif;
		endif;
	loop;
end;


void scan_definitions(@int line, @int previous_line)
	//checks if token_0 is "def";
	//if so then create the dictionary entry copy_of(token_1):copy_of(token_2) (copy_of()s nullify the ends of the strings)
	@int token = line[1];
	if (token[4] == 3) then //token length == 3
		@char text = token[2];
		if (text[0] == 'd') then
			if (text[1] == 'e') then
				if (text[2] == 'f') then
					token = token[0]; //token 1
					@char temp_string = copy_of(token[3],token[4]);
					token = token[0];
					@char result_string = copy_of(token[3],token[4]);
					insertToDict(definedDict,temp_string,result_string);
					dalloc(temp_string); //prevents memory leaks from too many undeallocated malloc partitions
					
					//delete line
					token = line[1];
					while (token) do  //delete 
						dalloc(token);
						token = token[0];
					loop;
					previous_line[0] = line[0];
					line[0] = 0; 		
					line[1] = 0;
					dalloc(line);
				endif;
			endif;
		endif;
	endif;
end;

@char copy_of(@char string_pointer,int length)
	char byte_length = length;
	length += 1;
	length = 1 +(length>>2) if length&3 else length>>2;
	@char return_string = malloc(length);
	int i;
	for (i = 0, i<byte_length, i += 1)
		return_string[i] = string_pointer[i];
	loop;
	return return_string;
end;

int intify(@char text, int length)
	int i;
	int total;
	for (i = 0, i<length, i += 1)
		if ((text[i]<='9')and (text[i]>='0')) then total = total * 10 + (text[i] - '0' ); endif;
	loop;
	return total;
end;

@char stringify(int integer)
pass;
end;


void print_tokens(@int line)
	printf("printing tokens\n");
	@int token;
	int length;
	@char text;
	int i;
	int line_count = 0;
	print_i(line);
	printf(" ");
	print_i(line[0]);

	putc('\n');
	while (line) do
		print_i(line_count); printf(" : ");
		line_count += 1;
		token = line[1];
		while (token) do
			text = token[2];
			length = token[3]&65535;  // gets lower word
			for (i = 0, i<length, i += 1) putc(text[i]); loop;
			token = token[0];
		loop;
		putc('\n');
		line = line[0];
	loop;
end;