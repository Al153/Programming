#include technicalPrimitives.cll

////////////////////////  STACK primitives //////////////////////////
void halt ()
	quit();
end;

void Fetch() // (Address -- value)
	if (ForthStackPointer == 0) then //check stack not empty
		printf("ERROR: Forth Stack Underflow.\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;

	@int address = ForthStack[ForthStackPointer-1];
	ForthStack[ForthStackPointer-1] = address[0];
end;

void Store() // (value address -- )
	if (ForthStackPointer<2) then
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer = ForthStackPointer-2;
	@int address = ForthStack[ForthStackPointer+1];
	address[0] = ForthStack[ForthStackPointer];
end;

void printTOS()
	int TOS = Pop();
	if (TOS&2147483648) then printf("-"); print_i(0-TOS); printf(" "); return; endif; //deals with negative numbers
	print_i(TOS); printf(" ");
end;

void printChar()
	int TOS = Pop();
	putc(char(TOS));
end;

void printStack()
	int i;
	for (i = 0, i<ForthStackPointer, i+=1)
		print_h(ForthStack[i]);printf(" ");
	loop;
end;

void printDict()
	@int ref;
	for (ref = ForthDictHead,ref,ref = ref[3])
		@char name = ref;
		printf(name);printf("\t");
	loop;
end;

void Dup()
	if (ForthStackPointer>0) then //if stack has a value on it then
		ForthStack[ForthStackPointer] = ForthStack[ForthStackPointer-1];
		ForthStackPointer = ForthStackPointer + 1;
		if (ForthStackPointer>FORTHSTACKSIZE) then
			printf("ERROR: Forth Stack Overflow.\n");
			dontBreak = char(0); //breaks to the REPL 
		endif;
	else
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL	
	endif;
end;

void Drop()
	if (ForthStackPointer>0) then //if stack has a value on it then
		ForthStackPointer = ForthStackPointer -1 ;
	else
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL	
	endif;
end;


void Swap()
	if (ForthStackPointer>1) then //if stack has a value on it then
		int temp = ForthStack[ForthStackPointer-2];
		ForthStack[ForthStackPointer-2] = ForthStack[ForthStackPointer-1];
		ForthStack[ForthStackPointer-1] = temp;
	else
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL	
	endif;
end;

void Rot()
	if (ForthStackPointer>2) then //if stack has a value on it then
		int temp = ForthStack[ForthStackPointer-1];
		ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-2];
		ForthStack[ForthStackPointer-2] = ForthStack[ForthStackPointer-3];
		ForthStack[ForthStackPointer-3] = temp;
	else
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL	
	endif;
end;

void Over()
	if (ForthStackPointer>1) then //if stack has a value on it then
		ForthStack[ForthStackPointer] = ForthStack[ForthStackPointer-2];
		ForthStackPointer = ForthStackPointer + 1;
		if (ForthStackPointer>FORTHSTACKSIZE) then
			printf("ERROR: Forth Stack Overflow.\n");
			dontBreak = char(0); //breaks to the REPL 
		endif;
	else
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL	
	endif;
end;

//////////////////////// Arithmetic + Logic primitives /////////////////////////////////

// the stack is Push increment decrement Pop, ie the stack pointer always points to the cell after the top of stack

//arithmetic primitives for forth, arithmetic is 2s complement
void ADD()
	if (ForthStackPointer<2) then 
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-1] + ForthStack[ForthStackPointer];
end;
void SUB()
	if (ForthStackPointer<2) then 
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-1] - ForthStack[ForthStackPointer];
end;
void MUL()
	if (ForthStackPointer<2) then 
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-1] * ForthStack[ForthStackPointer];
end;
void DIV()
	if (ForthStackPointer<2) then 
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-1] / ForthStack[ForthStackPointer];
end;
void MOD()
	if (ForthStackPointer<2) then 
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-1] % ForthStack[ForthStackPointer];
end;
void AND()
	if (ForthStackPointer<2) then 
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-1] & ForthStack[ForthStackPointer];
end;
void OR()
	if (ForthStackPointer<2) then 
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-1] | ForthStack[ForthStackPointer];
end;
void XOR()
	if (ForthStackPointer<2) then 
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-1] ^ ForthStack[ForthStackPointer];
end;
void NOT()
	if (ForthStackPointer<1) then 
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStack[ForthStackPointer-1] = ~ForthStack[ForthStackPointer-1];
end;

void NAND()
	if (ForthStackPointer<2) then 
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ~(ForthStack[ForthStackPointer-1]&ForthStack[ForthStackPointer]);
end;
void NOR()
	if (ForthStackPointer<2) then 
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ~(ForthStack[ForthStackPointer-1]|ForthStack[ForthStackPointer]);
end;
void XNOR()
	if (ForthStackPointer<2) then 
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ~(ForthStack[ForthStackPointer-1]^ForthStack[ForthStackPointer]);
end;

void SHR()
	if (ForthStackPointer<2) then 
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-1] >> ForthStack[ForthStackPointer];
end;


void SHL()
	if (ForthStackPointer<2) then 
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-1] << ForthStack[ForthStackPointer];
end;



//////// comparison //////////
void greater()
	if (ForthStackPointer<2) then 
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer = ForthStackPointer-1;
	int a = ForthStack[ForthStackPointer-1];
	int b = ForthStack[ForthStackPointer];
	if ((a&2147483648) and (b&2147483648)) then  ForthStack[ForthStackPointer-1] = __greater(a,b); //if both are negative then return (a>b), since this is 2s complement
	else if (a&2147483648) then ForthStack[ForthStackPointer-1] = 0; 							  //else if a is negative then return 0;
		else if (b&2147483648) then ForthStack[ForthStackPointer-1] = 1; 						  //else if b is negative then return 1;
			else ForthStack[ForthStackPointer-1] = __greater(a,b);
			endif;
		endif;
	endif;
end;

void less()
	if (ForthStackPointer<2) then 
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer = ForthStackPointer-1;
	int a = ForthStack[ForthStackPointer-1];
	int b = ForthStack[ForthStackPointer];
	if ((a&2147483648) and (b&2147483648)) then  ForthStack[ForthStackPointer-1] = __less(a,b); //if both are negative then return (a<b)
	else if (a&2147483648) then ForthStack[ForthStackPointer-1] = 1; 							  //else if a is negative then return 1;
		else if (b&2147483648) then ForthStack[ForthStackPointer-1] = 0; 						  //else if b is negative then return 0;
			else ForthStack[ForthStackPointer-1] = __less(a,b);
			endif;
		endif;
	endif;
end;

void equal()
	if (ForthStackPointer<2) then 
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer = ForthStackPointer-1;
	ForthStack[ForthStackPointer-1] = __equal(ForthStack[ForthStackPointer-1],ForthStack[ForthStackPointer]); //if both are negative then return (a>b)
end;

////////////////////////// IO WORDS ///////////////////////
void printBUF()
	printf(WORD_BUF); //prints out the most recent word to be read in
end;

void readC()
	Push(int(readStringChar()));
end;

void primPass()
	pass;
end;

////////////////////////// MEMORY WORDS /////////////////////////
void primAlloc()
	ForthStack[ForthStackPointer-1] = malloc(ForthStack[ForthStackPointer -1]);
end;

void primDalloc()
	ForthStackPointer -= 1;
	dalloc(ForthStack[ForthStackPointer]);
end;