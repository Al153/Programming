#include technicalPrimitives.cll

////////////////////////  STACK primitives //////////////////////////
void halt () // ( -- ) [Completely halts interpreter]
	quit();
end;

void Fetch() // (Address -- value) [ value = *(address)]
	if (ForthStackPointer == 0) then //check stack not empty
		printf("ERROR: Forth Stack Underflow.\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;

	@int address = ForthStack[ForthStackPointer-1];
	ForthStack[ForthStackPointer-1] = address[0]; // optimised push/pop sequence
end;

void Store() // (value address -- ) [Stores value to address]
	if (ForthStackPointer<2) then // checks for underflow
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer = ForthStackPointer-2;  // carry out a double pop
	@int address = ForthStack[ForthStackPointer+1];
	address[0] = ForthStack[ForthStackPointer];
end;

void printTOS() // (TOS -- ) [prints TOS]
	int TOS = Pop();
	if (TOS&2147483648) then printf("-"); print_i(0-TOS); printf(" "); return; endif; //deals with negative numbers
	print_i(TOS); printf(" ");
end;

void printChar() // ( TOS -- ) [ prints out(TOS & 0xff) as a character]
	int TOS = Pop();
	putc(char(TOS));
end;

void printStack() // ( -- ) [ prints out all elements on the stack in hexadecimal ]
	int i;
	for (i = 0, i<ForthStackPointer, i+=1) // iterate through stack
		print_h(ForthStack[i]);printf(" ");
	loop;
end;

void printDict() // ( -- ) [ prints out the names of all words in the dict ]
	@int ref;
	for (ref = ForthDictHead,ref,ref = ref[3]) // for-loop traverses the dictionary
		@char name = ref;
		printf(name);printf("\t"); // uses a tab to align text
	loop;
end;

void Dup() // ( val -- val val ) [ duplicates TOS ]
	if (ForthStackPointer>0) then //if stack has a value on it then
		ForthStack[ForthStackPointer] = ForthStack[ForthStackPointer-1]; // optimised peek/push sequence
		ForthStackPointer = ForthStackPointer + 1;
		if (ForthStackPointer>FORTHSTACKSIZE) then // check for overflow
			printf("ERROR: Forth Stack Overflow.\n");
			dontBreak = char(0); //breaks to the REPL 
		endif;
	else
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL	
	endif;
end;

void Drop() // ( val -- ) [ deletes TOS ]
	if (ForthStackPointer>0) then //if stack has a value on it then
		ForthStackPointer = ForthStackPointer -1 ;
	else
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL	
	endif;
end;


void Swap() // ( a b -- b a ) [ swaps two TOS items ]
	if (ForthStackPointer>1) then //if stack has a value on it then
		int temp = ForthStack[ForthStackPointer-2];
		ForthStack[ForthStackPointer-2] = ForthStack[ForthStackPointer-1]; //optimised push/pop/swap
		ForthStack[ForthStackPointer-1] = temp;
	else
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL	
	endif;
end;

void Rot() // ( a b c -- c a b) [ rotates top three stack elements ]
	if (ForthStackPointer>2) then //if stack has a value on it then
		int temp = ForthStack[ForthStackPointer-1];
		ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-2]; // optimised rot sequence
		ForthStack[ForthStackPointer-2] = ForthStack[ForthStackPointer-3];
		ForthStack[ForthStackPointer-3] = temp;
	else
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL	
	endif;
end;

void Over() // ( a b -- a b a ) [ duplicates second element on the Stack ]
	if (ForthStackPointer>1) then //if stack has a value on it then
		ForthStack[ForthStackPointer] = ForthStack[ForthStackPointer-2];
		ForthStackPointer = ForthStackPointer + 1;
		if (ForthStackPointer>FORTHSTACKSIZE) then
			printf("ERROR: Forth Stack Overflow.\n");
			dontBreak = char(0); //breaks to the REPL 
		endif;
	else
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL	
	endif;
end;

//////////////////////// Arithmetic + Logic primitives /////////////////////////////////

// the stack is Push increment decrement Pop, ie the stack pointer always points to the cell after the top of stack

//arithmetic primitives for forth, arithmetic is 2s complement
void ADD() // ( a b -- (a+b) ) [ adds two TOS ]
	if (ForthStackPointer<2) then // check for underflow
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-1] + ForthStack[ForthStackPointer];
end;
void SUB()
	if (ForthStackPointer<2) then // ( a b -- (a-b) ) [ subs two TOS ]
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-1] - ForthStack[ForthStackPointer];
end;
void MUL() // ( a b -- lower(a*b) ) [ multiplies two TOS, pushes bottom 32 bits of result ]
	if (ForthStackPointer<2) then  // check for underflow
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-1] * ForthStack[ForthStackPointer];
end;
void DIV() // ( a b -- (a/b) ) [ divs two TOS ]
	if (ForthStackPointer<2) then // check for underflow
		printf("ERROR: Forth Stack Underflow\n"); 
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-1] / ForthStack[ForthStackPointer];
end;
void MOD() // ( a b -- (a mod b) ) [ MODs two TOS ]
	if (ForthStackPointer<2) then // check for underflow
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-1] % ForthStack[ForthStackPointer];
end;
void AND() // ( a b -- (a&b) ) [ ANDs two TOS ]
	if (ForthStackPointer<2) then // check for underflow
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-1] & ForthStack[ForthStackPointer];
end;
void OR() // ( a b -- (a|b) ) [ ORs two TOS ]
	if (ForthStackPointer<2) then // check for underflow
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-1] | ForthStack[ForthStackPointer];
end;
void XOR() // ( a b -- (a^b) ) [ XORs two TOS ]
	if (ForthStackPointer<2) then // check for underflow
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-1] ^ ForthStack[ForthStackPointer];
end;
void NOT() // ( a -- !a) ) [ NOTs TOS ]
	if (ForthStackPointer<1) then // check for underflow
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStack[ForthStackPointer-1] = ~ForthStack[ForthStackPointer-1];
end;

void NAND() // ( a b -- !(a&b) ) [ NANDs two TOS ]
	if (ForthStackPointer<2) then // check for underflow
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ~(ForthStack[ForthStackPointer-1]&ForthStack[ForthStackPointer]);
end;
void NOR() // ( a b -- !(a|b) ) [ NORs two TOS ]
	if (ForthStackPointer<2) then // check for underflow
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ~(ForthStack[ForthStackPointer-1]|ForthStack[ForthStackPointer]);
end;
void XNOR() // ( a b -- !(a^b) ) [ XNORs two TOS ]
	if (ForthStackPointer<2) then // check for underflow
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ~(ForthStack[ForthStackPointer-1]^ForthStack[ForthStackPointer]);
end;

void SHR() // ( a b -- (a>>b) ) [ SHRs two TOS ]
	if (ForthStackPointer<2) then // check for underflow
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-1] >> ForthStack[ForthStackPointer];
end;


void SHL() // ( a b -- (a<<b) ) [ SHLs two TOS ]
	if (ForthStackPointer<2) then // check for underflow
		printf("ERROR: Forth Stack Underflow\n"); 
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer-=1;
	ForthStack[ForthStackPointer-1] = ForthStack[ForthStackPointer-1] << ForthStack[ForthStackPointer];
end;



//////// comparison //////////
void greater() // ( a b -- bool ) [ bool is result of comparison: true = 1, false = 0 ]
	if (ForthStackPointer<2) then // check for underflow
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer = ForthStackPointer-1;
	int a = ForthStack[ForthStackPointer-1];
	int b = ForthStack[ForthStackPointer];
	if ((a&2147483648) and (b&2147483648)) then  ForthStack[ForthStackPointer-1] = __greater(a,b); //if both are negative then return (a>b), since this is 2s complement
	else if (a&2147483648) then ForthStack[ForthStackPointer-1] = 0; 							  //else if a is negative then return 0;
		else if (b&2147483648) then ForthStack[ForthStackPointer-1] = 1; 						  //else if b is negative then return 1;
			else ForthStack[ForthStackPointer-1] = __greater(a,b);
			endif;
		endif;
	endif;
end;

void less() // ( a b -- bool ) [ bool is result of comparison: true = 1, false = 0 ]
	if (ForthStackPointer<2) then // check for underflow
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer = ForthStackPointer-1;
	int a = ForthStack[ForthStackPointer-1];
	int b = ForthStack[ForthStackPointer];
	if ((a&2147483648) and (b&2147483648)) then  ForthStack[ForthStackPointer-1] = __less(a,b); //if both are negative then return (a<b)
	else if (a&2147483648) then ForthStack[ForthStackPointer-1] = 1; 							  //else if a is negative then return 1;
		else if (b&2147483648) then ForthStack[ForthStackPointer-1] = 0; 						  //else if b is negative then return 0;
			else ForthStack[ForthStackPointer-1] = __less(a,b);
			endif;
		endif;
	endif;
end;

void equal() // ( a b -- bool ) [ bool is result of comparison: true = 1, false = 0 ]
	if (ForthStackPointer<2) then // check for underflow
		printf("ERROR: Forth Stack Underflow\n");
		dontBreak = char(0); //breaks to REPL
		return;
	endif;
	ForthStackPointer = ForthStackPointer-1;
	ForthStack[ForthStackPointer-1] = __equal(ForthStack[ForthStackPointer-1],ForthStack[ForthStackPointer]); //if both are negative then return (a>b)
end;

////////////////////////// IO WORDS ///////////////////////
void printBUF() // ( -- ) [ prints word on the input buffer ]
	printf(WORD_BUF); //prints out the most recent word to be read in
end;

void readC() // ( -- c ) [ reads in a character to the stack ]
	Push(int(readStringChar()));
end;

void primPass() // ( -- ) [ do nothing ]
	pass;
end;

////////////////////////// MEMORY WORDS /////////////////////////
void primAlloc() // ( size -- address ) [ allocates a section of memory the desired size ]
	ForthStack[ForthStackPointer-1] = malloc(ForthStack[ForthStackPointer -1]);
end;

void primDalloc() // ( address -- ) [ deallocates memory at address ]
	ForthStackPointer -= 1;
	dalloc(ForthStack[ForthStackPointer]);
end;