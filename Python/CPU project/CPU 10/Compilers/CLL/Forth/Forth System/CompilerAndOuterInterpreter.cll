//////////////////  Compiler/interpreter ///////////////////////////

// functions to run the interpreter and compiler
//TODO: add easy recursion
//ADD: comments

void compileWord()
	//compiles a word definition
	@char 9 name;
	convertName(scanWord(),name); //read in new name
	@int 3 top;
	compileSingleWord(top);
	if (dontBreak == 0) then scanToEndOfDef(); return; endif; //if there was an error then halt
	if (top[2]) then
		addToDict(name,top[0]);
	endif; //if it hits a semicolon then break
	@int last = top[1];
	@int 3 newWord;
	while (1) do
		compileSingleWord(newWord); //get the next word
		if (dontBreak == 0) then scanToEndOfDef(); return; endif; //if there was an error then halt
		if (newWord[2]) then break; endif; //if it hits a semicolon then break
		last[2] = newWord[0]; //if there was no error, then do the linkage
		last = newWord[1];
	loop;
	addToDict(name,top[0]);
end;

void compileSingleWord(@int retArray) //compiles a single word from the buffer, places a pointer to the first node in retArray[0], last node in retArray[1]
	retArray[2] = 0;
	primRead(); // reads in a word to the buffer
	while (checkDictName(WORD_BUF,"//")) do READ_IN_STATE = EMPTY; primRead(); loop; //deals with comments
	if (checkDictName(WORD_BUF,";")) then //scans word against special words .. if, while etc
		retArray[0] = 0;
		retArray[1] = 0;
		retArray[2] = 1; //signify a ;
	else
		if (checkDictName(WORD_BUF,"[")) then // causes the compiler to switch to an intepreter until a ] is encountered, at which point, the TOS is used as a PUSHLIT
			while (1) do
				primRead();
				if (checkDictName(WORD_BUF,"]")) then break; endif;
				@int dictEntry = isInDict(WORD_BUF,ForthDictHead);
				if (not(dictEntry)) then
					if (isInt()) then
						Push(convertInt());
					else
						printf("ERROR: could not execute word: ");printf(WORD_BUF);printf(" during compilation.\n");
						dontBreak = 0;
						return;
					endif;
				else
					bytecodeInterp(dictEntry[2]); //does some execution
				endif;
				if (dontBreak == 0) then printf("\nCould not complete compilation");return; endif;
			loop;
			retArray[0] = newByteCodeNode(PUSHLIT,Pop(),0); //creates a pushlit
			retArray[1] = retArray[0];
		else
			if (checkDictName(WORD_BUF,"if")) then
				@int 3 ifRetArray; //3rd index gives exit condition - 0 for then 1 for else 2 for ; (error)
				compileIfWord(ifRetArray);
				if (dontBreak == 0) then return; endif;//checks for an error
				if (ifRetArray[2] == 2) then printf("ERROR: Did not expect a semicolon when compiling an if statement\n"); dontBreak = 0; return; endif;
				if (ifRetArray[2] == 0) then // if..then
					@int placeholderNode = newByteCodeNode(PRIMITIVE,36,0); //uses a pass as a placeholder
					retArray[0] = newByteCodeNode(BRANCH,ifRetArray[0],placeholderNode);  //part of linkage
					@int bottom = ifRetArray[1];
					bottom[2] = placeholderNode;
					retArray[1] = placeholderNode;
				else if (ifRetArray[2] == 1) then // if...else..then
						@int 3 elseRetArray;
						compileIfWord(elseRetArray); //get the else clause
						if (dontBreak == 0) then return; endif;//checks for an error
						if (elseRetArray[2] == 2) then printf("ERROR: Did not expect a semicolon when compiling an if statement\n"); dontBreak = 0; return; endif;
						if (elseRetArray[2] == 1) then printf("ERROR: Did not expect second else clause when compiling and if statement\n"); dontBreak = 0; return; endif; // if...else..then 
						if (elseRetArray[2] == 0) then
					
							retArray[0] = newByteCodeNode(BRANCH,ifRetArray[0],elseRetArray[0]); //set up the top node
							placeholderNode = newByteCodeNode(PRIMITIVE,36,0); //set up the exit node
							bottom = ifRetArray[1]; 						   //link the two chains to the exit node
							bottom[2] = placeholderNode;
							bottom = elseRetArray[1];
							bottom[2] = placeholderNode;
							retArray[1] = placeholderNode;
						else
							printf("ERROR: unrecognised return code from compileIfWord: ");print_i(ifRetArray[2]); dontBreak = 0; return;
						endif;
					else
						printf("ERROR: unrecognised return code from compileIfWord: ");print_i(ifRetArray[2]); dontBreak = 0; return;
					endif;
				endif; 
			else
				if (checkDictName(WORD_BUF,"while")) then
					@int 3 whileRetArray; //return codes: 0: loop; 2: semicolon;
					compileWhileWord(whileRetArray);
					if (dontBreak == 0) then return; endif;//checks for an error
					if (whileRetArray[2] == 2) then printf("ERROR: Did not expect a semicolon when compiling an while statement"); dontBreak = 0; return; endif;
					if (whileRetArray[2] == 0) then // if..then
						retArray[0] = newByteCodeNode(BRANCH,whileRetArray[0],0);
						retArray[1] = retArray[0];
						bottom = whileRetArray[1];
						bottom[2] = retArray[0]; 
					else
						printf("ERROR: unrecognised return code from compileWhileWord: ");print_i(whileRetArray[2]);
					endif;	

				else
					if (checkDictName(WORD_BUF,".\"")) then //needs to create a string printing word
						compileStringPrint(retArray);
					else
						if (isInt()) then
							retArray[0] = newByteCodeNode(PUSHLIT,convertInt(),0);
							retArray[1] = retArray[0];


						else //if a normal word, then lookup reference
							@int reference = isInDict(WORD_BUF,ForthDictHead);
							if (reference) then 
								//if the word has only a single bytecode instruction (ie runs a primitive, then we just copy in the primitive)
								@int referenceNode = reference[2];
								if ((referenceNode[0] == PRIMITIVE)or(referenceNode[0] == PUSHLIT)) then
									if (referenceNode[2] == 0) then
										retArray[0] = newByteCodeNode(referenceNode[0],referenceNode[1],referenceNode[2]); //clone the node
										retArray[1] = retArray[0];
									else
										retArray[0] = newByteCodeNode(WORDCALL,reference,0); //otherwise return a word call
										retArray[1] = retArray[0];
									endif;
								else
									retArray[0] = newByteCodeNode(WORDCALL,reference,0);
									retArray[1] = retArray[0];
								endif;
							else printf("ERROR: unrecognised word compiled: \""); printf(WORD_BUF); printf("\"\n");				//maybe return an error in the future - go back to REPL
								dontBreak = 0;
								retArray[0] = 1;
								retArray[1] = 1; //returns an error code
							endif;
						endif;
					endif;
				endif;
			endif;
		endif;
	endif;
end;

void compileStringPrint(@int retArray) //compiles a string to be printed
	@int prev = newByteCodeNode(PRIMITIVE,36,0);
	retArray[0] = prev;
	while (1) do
		char newChar = readStringChar();
		if (newChar == '"') then
			retArray[1] = prev;
			return;
		endif;
		if (newChar == '\\') then newChar = readStringChar(); endif; //take into account escaped "s
		prev[2] = newByteCodeNode(PUSHLIT,int(newChar),newByteCodeNode(PRIMITIVE,35,0));
		prev = prev[2]; prev = prev[2];
	loop;
end;



void compileIfWord(@int retArray)
	//int dummy; //first line to start syntax highlighting
	@int start = newByteCodeNode(PRIMITIVE,36,0); // a pass block
	@int previous = start;
	retArray[2] = 0;
	while (1) do
		retArray[2] = 0;
		primRead(); // reads in a word to the buffer
		while (checkDictName(WORD_BUF,"//")) do READ_IN_STATE = EMPTY; primRead(); loop; //deals with comments
		if (checkDictName(WORD_BUF,"else")) then
			retArray[0] = start;
			retArray[1] = previous;
			retArray[2] = 1;
			return;
		endif; 
		if (checkDictName(WORD_BUF,"then")) then 
			retArray[0] = start;
			retArray[1] = previous;
			retArray[2] = 0;
			return;
		endif;
		if (checkDictName(WORD_BUF,";")) then //scans word against special words .. if, while etc
			retArray[0] = 0;
			retArray[1] = 0;
			retArray[2] = 2; //signify a ; - an error
			return;
		else
			if (checkDictName(WORD_BUF,"[")) then // causes the compiler to switch to an intepreter until a ] is encountered, at which point, the TOS is used as a PUSHLIT
				while (1) do
					primRead();
					if (checkDictName(WORD_BUF,"]")) then break; endif;
					@int dictEntry = isInDict(WORD_BUF,ForthDictHead);
					bytecodeInterp(dictEntry[2]); //does some execution
					if (dontBreak == 0) then printf("\nCould not complete compilation\n");return; endif;
				loop;
				retArray[0] = newByteCodeNode(PUSHLIT,Pop(),0); //creates a pushlit
				retArray[1] = retArray[0];
			else
				if (checkDictName(WORD_BUF,"if")) then
					@int 3 ifRetArray; //3rd index gives exit condition - 0 for then 1 for else 2 for ; (error)
					compileIfWord(ifRetArray);
					if (dontBreak == 0) then return; endif;//checks for an error
					if (ifRetArray[2] == 2) then printf("ERROR: Did not expect a semicolon when compiling an if statement\n"); dontBreak = 0; return; endif;
					if (ifRetArray[2] == 0) then // if..then
						@int placeholderNode = newByteCodeNode(PRIMITIVE,36,0); //uses a pass as a placeholder
						retArray[0] = newByteCodeNode(BRANCH,ifRetArray[0],placeholderNode);  //part of linkage
						@int bottom = ifRetArray[1];
						bottom[2] = placeholderNode;
						retArray[1] = placeholderNode;
					else if (ifRetArray[2] == 1) then // if...else..then
							@int 3 elseRetArray;
							compileIfWord(elseRetArray); //get the else clause
							if (dontBreak == 0) then return; endif;//checks for an error
							if (elseRetArray[2] == 2) then printf("ERROR: Did not expect a semicolon when compiling an if statement\n"); dontBreak = 0; return; endif;
							if (elseRetArray[2] == 1) then printf("ERROR: Did not expect second else clause when compiling and if statement\n"); dontBreak = 0; return; endif; // if...else..then 
							if (elseRetArray[2] == 0) then
						
								retArray[0] = newByteCodeNode(BRANCH,ifRetArray[0],elseRetArray[0]); //set up the top node
								placeholderNode = newByteCodeNode(PRIMITIVE,36,0); //set up the exit node
								bottom = ifRetArray[1]; 						   //link the two chains to the exit node
								bottom[2] = placeholderNode;
								bottom = elseRetArray[1];
								bottom[2] = placeholderNode;
								retArray[1] = placeholderNode;
							else
								printf("ERROR: unrecognised return code from compileIfWord: ");print_i(ifRetArray[2]); dontBreak = 0; return;
							endif;
						else
							printf("ERROR: unrecognised return code from compileIfWord: ");print_i(ifRetArray[2]); dontBreak = 0; return;
						endif;
					endif; 
				else
					if (checkDictName(WORD_BUF,"while")) then
						@int 3 whileRetArray; //return codes: 0: loop; 2: semicolon;
						compileWhileWord(whileRetArray);
						if (dontBreak == 0) then return; endif;//checks for an error
						if (whileRetArray[2] == 2) then printf("ERROR: Did not expect a semicolon when compiling an while statement"); dontBreak = 0; return; endif;
						if (whileRetArray[2] == 0) then // if..then
							retArray[0] = newByteCodeNode(BRANCH,whileRetArray[0],0);
							retArray[1] = retArray[0];
							bottom = whileRetArray[1];
							bottom[2] = retArray[0]; 
						else
							printf("ERROR: unrecognised return code from compileWhileWord: ");print_i(whileRetArray[2]);dontBreak = 0; return;
						endif;		

					else
						if (checkDictName(WORD_BUF,".\"")) then //needs to create a string printing word
							compileStringPrint(retArray);
						else
							if (isInt()) then
								retArray[0] = newByteCodeNode(PUSHLIT,convertInt(),0);
								retArray[1] = retArray[0];
	
	
							else //if a normal word, then lookup reference
								@int reference = isInDict(WORD_BUF,ForthDictHead);
								if (reference) then 
									//if the word has only a single bytecode instruction (ie runs a primitive, then we just copy in the primitive)
									@int referenceNode = reference[2];
									if ((referenceNode[0] == PRIMITIVE)or(referenceNode[0] == PUSHLIT)) then
										if (referenceNode[2] == 0) then
											retArray[0] = newByteCodeNode(referenceNode[0],referenceNode[1],referenceNode[2]); //clone the node
											retArray[1] = retArray[0];
										else
											retArray[0] = newByteCodeNode(WORDCALL,reference,0); //otherwise return a word call
											retArray[1] = retArray[0];
										endif;
									else
										retArray[0] = newByteCodeNode(WORDCALL,reference,0);
										retArray[1] = retArray[0];
									endif;
								else printf("ERROR: unrecognised word compiled: \""); printf(WORD_BUF); printf("\"\n");				//maybe return an error in the future - go back to REPL
									dontBreak = 0;
									retArray[0] = 1;
									retArray[1] = 1; //returns an error code
								endif;
							endif;
						endif;
					endif;
				endif;
			endif;
		endif;
		previous[2] = retArray[0];
		previous = retArray[1];
	loop;
	retArray[0] = start;
	retArray[1] = previous;
end;

void compileWhileWord(@int retArray)
	int dummy; //first line to start syntax highlighting
	@int start = newByteCodeNode(PRIMITIVE,36,0); // a pass block
	@int previous = start;
	while (1) do
		retArray[2] = 0;
		primRead(); // reads in a word to the buffer
		while (checkDictName(WORD_BUF,"//")) do READ_IN_STATE = EMPTY; primRead(); loop; //deals with comments
		if (checkDictName(WORD_BUF,"loop")) then
			retArray[2] = 0;
			retArray[0] = start;
			retArray[1] = previous;
			return;
		endif; 
		if (checkDictName(WORD_BUF,";")) then //scans word against special words .. if, while etc
			retArray[0] = 0;
			retArray[1] = 0;
			retArray[2] = 2; //signify a ; - an error
			return;
		else
			if (checkDictName(WORD_BUF,"[")) then // causes the compiler to switch to an intepreter until a ] is encountered, at which point, the TOS is used as a PUSHLIT
				while (1) do
					primRead();
					if (checkDictName(WORD_BUF,"]")) then break; endif;
					@int dictEntry = isInDict(WORD_BUF,ForthDictHead);
					bytecodeInterp(dictEntry[2]); //does some execution
					if (dontBreak == 0) then printf("\nCould not complete compilation");return; endif;
				loop;
				retArray[0] = newByteCodeNode(PUSHLIT,Pop(),0); //creates a pushlit
				retArray[1] = retArray[0];
			else
				if (checkDictName(WORD_BUF,"if")) then
					pass;
					@int 3 ifRetArray; //3rd index gives exit condition - 0 for then 1 for else 2 for ; (error)
					compileIfWord(ifRetArray);
					if (dontBreak == 0) then return; endif;//checks for an error
					if (ifRetArray[2] == 2) then printf("ERROR: Did not expect a semicolon when compiling an if statement\n"); dontBreak = 0; return; endif;
					if (ifRetArray[2] == 0) then // if..then
						@int placeholderNode = newByteCodeNode(PRIMITIVE,36,0); //uses a pass as a placeholder
						retArray[0] = newByteCodeNode(BRANCH,ifRetArray[0],placeholderNode);  //part of linkage
						@int bottom = ifRetArray[1];
						bottom[2] = placeholderNode;
						retArray[1] = placeholderNode;
					else if (ifRetArray[2] == 1) then // if...else..then
							@int 3 elseRetArray;
							compileIfWord(elseRetArray); //get the else clause
							if (dontBreak == 0) then return; endif;//checks for an error
							if (elseRetArray[2] == 2) then printf("ERROR: Did not expect a semicolon when compiling an if statement\n"); dontBreak = 0; return; endif;
							if (elseRetArray[2] == 1) then printf("ERROR: Did not expect second else clause when compiling and if statement\n"); dontBreak = 0; return; endif; // if...else..then 
							if (elseRetArray[2] == 0) then
						
								retArray[0] = newByteCodeNode(BRANCH,ifRetArray[0],elseRetArray[0]); //set up the top node
								placeholderNode = newByteCodeNode(PRIMITIVE,36,0); //set up the exit node
								bottom = ifRetArray[1]; 						   //link the two chains to the exit node
								bottom[2] = placeholderNode;
								bottom = elseRetArray[1];
								bottom[2] = placeholderNode;
								retArray[1] = placeholderNode;
							else
								printf("ERROR: unrecognised return code from compileIfWord: ");print_i(ifRetArray[2]); dontBreak = 0; return;
							endif;
						else
							printf("ERROR: unrecognised return code from compileIfWord: ");print_i(ifRetArray[2]); dontBreak = 0; return;
						endif;
					endif; 
				else
					if (checkDictName(WORD_BUF,"while")) then
						@int 3 whileRetArray; //return codes: 0: loop; 2: semicolon;
						compileWhileWord(whileRetArray);
						if (dontBreak == 0) then return; endif;//checks for an error
						if (whileRetArray[2] == 2) then printf("ERROR: Did not expect a semicolon when compiling an while statement"); dontBreak = 0; return; endif;
						if (whileRetArray[2] == 0) then // if..then
							retArray[0] = newByteCodeNode(BRANCH,whileRetArray[0],0);
							retArray[1] = retArray[0];
							bottom = whileRetArray[1];
							bottom[2] = retArray[0]; 
						else
							printf("ERROR: unrecognised return code from compileWhileWord: ");print_i(whileRetArray[2]); dontBreak = 0; return;
						endif;		

					else
						if (checkDictName(WORD_BUF,".\"")) then //needs to create a string printing word
							compileStringPrint(retArray);
						else
							if (isInt()) then
								retArray[0] = newByteCodeNode(PUSHLIT,convertInt(),0);
								retArray[1] = retArray[0];
	
	
							else //if a normal word, then lookup reference
								@int reference = isInDict(WORD_BUF,ForthDictHead);
								if (reference) then 
									//if the word has only a single bytecode instruction (ie runs a primitive, then we just copy in the primitive)
									@int referenceNode = reference[2];
									if ((referenceNode[0] == PRIMITIVE)or(referenceNode[0] == PUSHLIT)) then
										if (referenceNode[2] == 0) then
											retArray[0] = newByteCodeNode(referenceNode[0],referenceNode[1],referenceNode[2]); //clone the node
											retArray[1] = retArray[0];
										else
											retArray[0] = newByteCodeNode(WORDCALL,reference,0); //otherwise return a word call
											retArray[1] = retArray[0];
										endif;
									else
										retArray[0] = newByteCodeNode(WORDCALL,reference,0);
										retArray[1] = retArray[0];
									endif;
								else printf("ERROR: unrecognised word compiled: \""); printf(WORD_BUF); printf("\"\n");				//maybe return an error in the future - go back to REPL
									dontBreak = 0;
									retArray[0] = 1;
									retArray[1] = 1; //returns an error code
								endif;
							endif;
						endif;
					endif;
				endif;
			endif;
		endif;
		previous[2] = retArray[0]; //linkage
		previous = retArray[1];
	loop;
	retArray[0] = start;
	retArray[1] = previous;
end;