//////////////////////// Dictionary management //////////////////////

//dictionary does not need initialisation or construction, since editDictEntry edis the forthDictHead directly

@int ForthDictHead = 0;
@int ForthDictTail = 0;

void addToDict(@char name, @int codePtr)
	@int newEntry = newDictInst(name,codePtr);
	newEntry[3] = ForthDictHead;
	ForthDictHead = newEntry;
end;

void editDictEntry(@char name, @int codePtr)
	//tries to edit the code pointer of a word in the dictionary, if word doesnt already exist, then add a new one at the top of the dictionary
	int dict = ForthDictHead;
	int address = isInDict(name,dict);
	if (address) then 
		if ((address[2])and(address[2] != codePtr])) then
			collectGarbage(address[2]);
			address[2] = codePtr;

		endif;
	else
		//add to dictionary
		@int newEntry = newDictInst(name,codePtr);
		newEntry[3] = ForthDictHead;
		ForthDictHead = newEntry;
	endif;
end;

int checkDictName(@char name, @char reference)
//returns 1 for match, 0 for fail
	int i;
	for (i = 0, i<8, i = i + 1)
		if (name[i] != reference[i]) then return 0; endif; //fail
		if (name[i] == 0) then return 1; endif; //end of string, success
	loop;
end;

@int isInDict(@char name,@int dict)
	while(dict)do
		if(checkDictName(name,dict))then return dict; endif;
		dict = dict[3];
	loop;
	return 0; //failure 
end;


@int newDictInst(@char name, @int codePtr)
	@int returnPTR = malloc(4);
	// set up name
	@char name_pointer;
	int i = 0;
	while (i<8) do
		if (name[i]) then
			name_pointer[i] = name[i];
		else
			break;
		endif;
		i = i + 1;
	loop;
	while (i<8) do name_pointer[i] = 0; i = i + 1; loop; //initialise rest with zeros
	returnPTR[2] = codePtr;
	returnPTR[3] = 0;
	return returnPTR;
end;

///////////////////////// Bytecode generation /////////////////////////
@int newByteCodeNode(int type, int field1, int field2)
	@int returnPTR = malloc(4); //requires 4 ints to represent a bytecode op
	returnPTR[0] = type;
	returnPTR[1] = field1;
	returnPTR[2] = field2;
	returnPTR[3] = 0; 					//sets flags to zero
end;


void collectGarbage(@int node)
	//deallocates node and all its descendents, recursively
	if (not(node[3])) then 		//if not marked
		node[3] = 1; 			//marks
		if (node[0] == BRANCH) then
			collectGarbage(node[2]); //deallocates other node
		endif;
		collectGarbage(node[1]); //deallocates default pointed to node
		dalloc(node); 			 //calls actual dalloc routine for deallocation
	endif;
end;