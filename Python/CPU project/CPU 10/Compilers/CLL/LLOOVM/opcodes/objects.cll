//opcodes to do with objec navigation etc

void GetName()  //codestream: name string  stack: . . . object ==> . . . object.name
	//gets the object
	int mode = Pop();
	if (mode!=MODE:OBJ) then raise("RUNTIME","Attempted to tret non-reference value as an object.");endif;	@char name = PC;
	@int len = name;
	len = len[0];
	PC += len + 4;  //increments PC to the end of the name

	//now we need to find in the object's attributes an attribute wih that name
	@int new = __getAttrName(obj[OBJ_ATTR],name);
	if (new) then Push(new);Push(MODE:OBJ);
	else
		raise("RUNTIME",noRef(obj,name));
	endif;
end;

void GetNameLeave()  //codestream: name string  stack: . . . object ==> . . . object.name, object
	//gets the object
	int mode = Pop();
	if (mode!=MODE:OBJ) then raise("RUNTIME","Attempted to tret non-reference value as an object.");endif;
	@int obj = Pop();
	@char name = PC;
	@int len = name;
	len = len[0];
	PC += len + 4;  //increments PC to the end of the name

	//now we need to find in the object's attributes an attribute wih that name
	@int new = __getAttrName(obj[OBJ_ATTR],name);
	if (new) then Push(new);Push(MODE:OBJ);Push(obj);Push(MODE:OBJ);
	else
		raise("RUNTIME",noAttrName(obj,name));
	endif;
end;

void GetRef() //codestream: int stack: . . . object ==> . . . object[ref]
	int mode = Pop();
	if (mode!=MODE:OBJ) then raise("RUNTIME","Attempted to tret non-reference value as an object.");endif;
	@int obj = Pop();
	@int ref = PC;
	ref = ref[0];
	PC += 4;  //increments PC to the end of the name

	//now we need to find in the object's attributes an attribute wih that name
	@int new = __getAttref(obj[OBJ_ATTR],ref);
	if (new) then Push(new);Push(MODE:OBJ);
	else
		raise("RUNTIME",noAttrRef(obj,ref));
	endif;
end;

void GetRefLeave() //codestream: int stack: . . . object ==> . . . object[ref] object
	int mode = Pop();
	if (mode!=MODE:OBJ) then raise("RUNTIME","Attempted to treast non-reference value as an object.");endif;
	@int obj = Pop();
	@int ref = PC;
	ref = ref[0];
	PC += 4;  //increments PC to the end of the name

	//now we need to find in the object's attributes an attribute wih that name
	@int new = __getAttref(obj[OBJ_ATTR],ref);
	if (new) then Push(new); Push(MODE:OBJ);
				  Push(obj);Push(MODE:OBJ);
	else
		raise("RUNTIME",noAttrRef(obj,ref));
	endif;
end;

void GetValue() // stack . . . valuedOject ==> . . . value
	int mode = Pop();
	if (mode!=MODE:OBJ) then raise("RUNTIME","Attempted to treat non-reference value as an object.");endif;
	@int obj = Pop();
	int type = obj[OBJ_TYPE];
	if ((type>=LLOOVM_INT)and(type<=LLOOVM_BOOL)) then
		//list of ifs since CLL does not support branch tables - mayeb a future update

		if (type == LLOOVM_INT) then
			Push(obj[OBJ_META]);Push(MODE:INT);
			return;
		endif;
		if (type == LLOOVM_CHAR) then
			Push(obj[OBJ_META]);Push(MODE:CHAR);
			return;
		endif;
		if (type == LLOOVM_FLOAT) then
			Push(obj[OBJ_META]);Push(MODE:FLOAT);
			return;
		endif;
		if (type == LLOOVM_BOOL) then
			Push(obj[OBJ_META]);Push(MODE:BOOL);
			return;
		endif;
	else
		raise("TYPING","attempted to access teh value of an oject without a value field.");
	endif;
end;

void GetValueLeave() // stack . . . valuedOject ==> . . . value valuedObject
	int mode = Pop();
	if (mode!=MODE:OBJ) then raise("RUNTIME","Attempted to treat non-reference value as an object.");endif;
	@int obj = Pop();
	int type = obj[OBJ_TYPE];
	if ((type>=LLOOVM_INT)and(type<=LLOOVM_BOOL)) then
		//list of ifs since CLL does not support branch tables - mayeb a future update

		if (type == LLOOVM_INT) then
			Push(obj[OBJ_META]);Push(MODE:INT);
			return;
		endif;
		if (type == LLOOVM_CHAR) then
			Push(obj[OBJ_META]);Push(MODE:CHAR);
			return;
		endif;
		if (type == LLOOVM_FLOAT) then
			Push(obj[OBJ_META]);Push(MODE:FLOAT);
			return;
		endif;
		if (type == LLOOVM_BOOL) then
			Push(obj[OBJ_META]);Push(MODE:BOOL);
			return;
		endif;
	else
		raise("TYPING","attempted to access the value of an oject without a value field.");
	endif;
end;

void Copy()

end;

void New()  //codestream: namestring [codestring] stack: . . . class ==> . . . obj (new object of type class)

end;

void Del()		//codestream
	//removes the 
end;

void Collect()

end;

void Template()

end;

void StoreName()

end;

void StoreRef()

end;

void StoreValue()

end;