// database entry format:


//////////////////////
// KEY (32bit) 		//	
//////////////////////
// Llink 			//
//////////////////////
// Rlink 			//
//////////////////////
// Data pointer     //
//////////////////////

#include allocation.cll


void main()
	malloc_init();
	@int myDict = newDict("Hello","world");

	insertToDict(myDict,"foo","BAR");
	insertToDict(myDict,"mary","had");
	insertToDict(myDict,"a little ","lamb");
	insertToDict(myDict,"foo","testing replacement");
	insertToDict(myDict,"12","34");
	insertToDict(myDict,"ab","bc");
	insertToDict(myDict,"bc","cd");
	insertToDict(myDict,"cd","de");
	insertToDict(myDict,"de","ef");
	insertToDict(myDict,"fg","gh");
	insertToDict(myDict,"gh","hi");

	dumpDict(myDict);
	printf("DUMPED\n");
	reBalanceDictTree(@myDict);

	dumpDict(myDict);

	@char test = retrieveFromDict(myDict,"a little ");
	printf(test);
	print_i(simpleHash("a little "));
end;
 
//____________________________________ DICT TREE EDITING ALGORITHMS _____________________________________________

@int newDict(@char keyString,@int dataPTR)
	//initialises a dictionary using the
	int key = simpleHash(keyString);
//	printf("\nKey = "); print_i(key);
	@int data = createNewDataEntry(keyString,dataPTR);
//	printf("\naddress = "); print_i(data);
//	printf("\n");
	return createNewTreeNode(key,0,0,data);
end;

void editDict(int key, @int dataPTR,@int dict)

	if (key == dict[0]) then //needs to change dict
		dict[3] = dataPTR;	
	else
		if (key>dict[0]) then
			if (dict[2]) then editDict(key,dataPTR,dict[2]); //if there is a node to the right, try to add relative to it
			else dict[2] = createNewTreeNode(key,0,0,dataPTR); //otherwise fit in the new node here
			endif;
		else
			if (dict[1]) then editDict(key,dataPTR,dict[1]); //if there is a node to the left, try to add relative to it
			else dict[1] = createNewTreeNode(key,0,0,dataPTR); //otherwise fit in the new node here
			endif;
		endif;	 
	endif;
end;


@int findKey(int key, @int dict)
	//binary searchon tree
//	printf("\nkey at node = "); print_i(dict[3]);
	if (not(dict)) then return 0; endif; //failure if no key of correct address
	if (key == dict[0]) then return dict[3]; endif; 		//if correct key then return address of data
	if (key>dict[0]) then return findKey(key,dict[2]); endif;
	return findKey(key,dict[1]);
end;

@int findTreeNode(int key, @int dict)
	//binary searchon tree
	//instead returns the address of the tree node as opposed to the data entry
	if (not(dict)) then return 0; endif; //failure if no key of correct address
	if (key == dict[0]) then return dict; endif; 		//if correct key then return address of data
	if (key>dict[0]) then return findKey(key,dict[2]); endif;
	return findKey(key,dict[1]);
end;

@int createNewTreeNode(int key,@int Llink,@int Rlink,@int dataPTR)
	@int return_value =  malloc(4);
	//creates a tree node
	return_value[0] = key;
	return_value[1] = Llink;
	return_value[2] = Rlink;
	return_value[3] = dataPTR;
//	printf("\nnew tree node address = "); print_i(return_value);
	return return_value;
end;



void reBalanceDictTree(@int dictptr)
	@int dict = dictptr[0];
	printf("REBALANCING TREE\n");
	@int top = sortTree(dict);  //turns tree into a doubly linked circular list with a pointer to the top element
	@int bottom = top[2];
	dumpList(bottom);
	bottom = pruneTree(bottom);
	int length = getListLength(bottom);

	dictptr[0] = createBalancedTree(bottom,length);
end;

@int createBalancedTree_rightmost; //stores next node
int TREEOPCOUNT = 32; //counts number of tree insertions and deletions, after 32, the tree is rebalanced

@int createBalancedTree(@int node, int length)
	if (length) then
		int left_length = length/2;
		int right_length = left_length;
		if (left_length<<2 == length) then left_length = left_length-1; endif;
		@int leftPointer = createBalancedTree(node,left_length);
		node = createBalancedTree_rightmost;
		@int rightPointer = createBalancedTree(node[2],right_length);

		if (not(rightPointer)) then createBalancedTree_rightmost = node[2]; endif; //if leaf node on right hand side, then update rightmost

		node[1] = leftPointer;
		node[2] = rightPointer;
	else
		return 0;
	endif;


end;

@int pruneTree(@int bottom)
	@int newBottom = bottom;
	while(not(newBottom[3])) do
		newBottom = newBottom[2];
		if (newBottom==bottom) then
			return bottom; endif; //there are no non-empty nodes so  just return the bottom
	loop;
	@int node = newBottom;
	while (node[2]!=newBottom) do
		print_i(node);
		printf("\n");
		@int next = node[2];
		if(not(node[3])) then
			printf("DALLOCING\n");
			@int previous = node[1];

			previous[2] = next;
			next[1] = previous;
			dalloc(node);
		endif;
		node = next;
	loop;
	return newBottom;
end;

int getListLength(@int top)
	int length = 1;
	@int node = top;
	while(node[2]!=top) do
		node = node[2];
		length = length + 1;
	loop;
	return length;
end;


@int sortTree(@int node)
//also needs to delete empty nodes
//////////////////////////////////
// delete emptynodes 			//
//////////////////////////////////
	if (node[1]) then
		node[1] = sortTree(node[1]);
		if (node[2]) then //both
			@int top = sortTree(node[2]); //top is the very top end of the tree
			node[2] = top[2];
			@int bottom = node[1];
			bottom = bottom[2]; 		//bottom is the right of top(node[1])

			bottom[1] = top;
			top[2] = bottom;  //adds circular pointers

			@int temp = node[2]; 		//sets the links on the nodes left and right of central node
			temp[1] = node;

			temp = node[1];
			temp[2] = node;

		else 				//just left
			top = node;
			temp = node[1];
			node[2] = temp[2];
			bottom = node[2];
			bottom[1] = node;
			temp[2] = node;

		endif;
	else
		if (node[2]) then //just right
			node[2] = sortTree(node[2]);
			top = node[2];
			temp = top[2];
			temp[1] = node;
			node[2] = temp;
			node[1] = top;
			top[2] = node;
		else  //neither
			top = node;
			node[1] = node;
			node[2] = node;
		endif;
	endif;
	if (not(node[1])) then printf("ERROR IN SORT: EMPTY LEFT NODE\n"); endif;
	if (not(node[2])) then printf("ERROR IN SORT: EMPTY RIGHT NODE\n"); endif;
	return top;
end;


// _____________________________ HASHING ALGORITHMS _________________________________

int simpleHash(@char str)
//SDBM  hash function
        int hash = 0;
        int i = 0;
        while (str[i]) do
            hash = (hash << 6) + (hash << 16) - hash + str[i];
        	i = i + 1;
        loop;
        return hash;
end;

////////////////////////////////////////////////////////////////////////////////////////////
// 					structure of tree is nodes of the form:
// 					--------------------------------
// 					| KeyOfNode (32bit int)			|
//					--------------------------------
// 					| Left node ptr (smaller key)	|
// 					--------------------------------
// 					| Right node ptr (larger key) 	|
// 					--------------------------------
// 					| Data Entry ptr  				|
// 					________________________________
//
// 					End node ptrs are nullified to 0
//
// 					Structure of a data entry
// 					
// 					---------------------------------
// 					| Key string pointer 			|   - points to a copy of the key string for this entry 
// 					---------------------------------  
// 					| Data Ptr 						| 	- points to the data of this entry
// 					--------------------------------- 
// 					| Collision link ptr 			| 	- points to the next entry (in event of collision)
// 					---------------------------------
//
//
//
//
//


//_________________________________________ DICT SPECIFiC FUNCTIONS ______________________________

void insertToDict(@int dict, @char keyString, int dataPTR)
	//generates a dictionary entry corresponding to the tree string
	TREEOPCOUNT = TREEOPCOUNT - 1;
	if (not(TREEOPCOUNT)) then TREEOPCOUNT = 32; reBalanceDictTree(@dict); endif;
	int key = simpleHash(keyString);
	@int entryAddress = findKey(key,dict); //gets address of a data ptr
	if (entryAddress) then
		if (checkKey(entryAddress[0],keyString)) then 
			//if the same, then just  change dict pointer
			entryAddress[1] = dataPTR;
		else //need to add to linked list
			while(entryAddress[2])do
				entryAddress = entryAddress[2];  //gets to the end of the linked list
				if (checkKey(keyString,entryAddress[0])) then 		//if matching key string
					entryAddress[1] = dataPTR;
					return;
				endif;
			loop;
			entryAddress[2] = createNewDataEntry(keyString,dataPTR);
		endif;
	else
		editDict(key,createNewDataEntry(keyString,dataPTR),dict); //if not in tree, create a new node in the tree
	endif;
end;

@int retrieveFromDict(@int dict, @char keyString)
	//returns the data pointer in a dictionary entry
	int key = simpleHash(keyString);
	@int entryAddress = findKey(key,dict); //gets address of a data ptr
	printf(entryAddress[0]);
	printf("\n");
	if (entryAddress) then

		if (checkKey(entryAddress[0],keyString)) then 
			//if the same, then return dict pointer
			return entryAddress[1];
		else //need to add to linked list
			while(entryAddress[2])do
				entryAddress = entryAddress[2];  //gets to the end of the linked list
				if (checkKey(keyString,entryAddress[0])) then 		//if matching key string
					return entryAddress[1]; 							//return ptr
				endif;
			loop;
			return 0; //if gets to end without finding matching key string, then return 0
		endif;
	else
		return 0; //if not in tree, return failure
	endif;
end;

int deleteFromDict(@int dict, @char keyString)
	//returns 1 for success, 0 for fail
	TREEOPCOUNT = TREEOPCOUNT - 1;
	if (not(TREEOPCOUNT)) then TREEOPCOUNT = 32; reBalanceDictTree(@dict); endif;
	int key = simpleHash(keyString);
	@int treeNodeAddress = findTreeNode(key,dict);
	@int entryAddress = treeNodeAddress[3]; //gets address of a data ptr

	if (entryAddress) then
		if (checkKey(entryAddress[0],keyString)) then 
			//if the same, then delete node
			if (entryAddress[2]) then 
				//needs to change pointer in tree
				treeNodeAddress[3] = entryAddress[2]; //changes tree pointer
				dalloc(entryAddress);
			else
				treeNodeAddress[3] = 0;
			endif;
			@char entrykeyString = entryAddress[0];
			dalloc(entrykeyString);
			dalloc(entryAddress);
			return 1; //success
		else //need to delete from linked list
			while (entryAddress[2]) do
				@int previousEntryAdrress = entryAddress;
				entryAddress = entryAddress[2];
				if (checkKey(entryAddress[0],keyString)) then
					previousEntryAdrress[2] = entryAddress[2];
					dalloc(entryAddress);
				endif;
			loop;
			return 0; 		//failed
		endif;
	else
		return 0; //if not in tree, return failure
	endif;
end;

//__________________________________ Dump dict ______________________________
void dumpDict(@int dict)
	if (dict[1]) then dumpDict(dict[1]); endif;
	if (dict[2]) then dumpDict(dict[2]); endif;
	@int entry = dict[3];
	while (entry) do
		printf(entry[0]);
		printf(":");
		printf(entry[1]);
		printf("\n");
		entry = entry[2];
	loop;
end;

void dumpList(@int dict)
	@int node = dict;
	printf("__________________________________ DUMPING LIST ________________________________\n");
	while(1)do
		@int data = node[3];
		@char keyString = data[0];
		@char string = data[1];
		printf("Node address = ");
		print_i(node);
		printf("\tDataPointer = ");
		print_i(data);
		printf("\tHash value = ");
		print_i(node[0]);
		printf("\tStored strings = ");
		printf(keyString);
		printf(":");
		printf(string);
		printf("\n");
		if (not(node[2])) then printf("NULL RIGHT LINK\n"); break; endif;
		if (not(node[1])) then printf("NULL LEFT LINK\n"); break; endif;
		node = node[2];
		if (node == dict) then break; endif;
	loop;
	printf("__________________________________ LIST DUMPED _________________________________\n");
end;

//__________________________________ AUXILARY DICT EDITTING FUNCTIOnS __________________________________

@int createNewDataEntry(@char keyString, int dataPTR)
	//allocate space for a copy of the keyString
	int keyStringLength = getLength(keyString);
	if (keyStringLength&3) then keyStringLength = 1 + (keyStringLength>>2); else keyStringLength = keyStringLength>>2; endif;  //pads if needed, uses &3 and <<2 for %4 and *4 respectively
	@char keyStringCopy = malloc(keyStringLength); 					//allocates a section of memory of desired length
	copyString(keyString,keyStringCopy,keyStringLength<<2);  		//copies key string
//	printf("\nnew string = ");
//	printf(keyStringCopy);
	//allocate space for the newDictEntry
	@int return_value = malloc(4);
	return_value[0] = keyStringCopy; //adds in pointers to keyString and data pointer
	return_value[1] = dataPTR;
	return_value[2] = 0; 				//nullifies end node
	return return_value; 
end;

int checkKey(@char key1, @char key2)
	//checks if two strigns are equal
	//returns 1 for equal, 0 for not
	int i = 0;
	while(key1[i])do
		if (key1[i] != key2[i]) then return 0; endif;
		i = i + 1;
	loop;
	if (key2[i])then return 0; endif;
	return 1;
end;

void copyString(@char source, @char destination, int total_length)
	int i;
	int state = 1;
	for (i = 0, i<total_length,i = i+1)
		if (state) then
			destination[i] = source[i];
			if (not(source[i])) then
				state = 0;
			endif;
		else
			destination[i] = 0;
		endif;
	loop;
end;


int getLength(@char string)
	//finds length of a string
	int count = 0;
	for (count = 0, string[count], count = count + 1) continue; loop;
	return count+1; //plus one to include null terminal
end;
