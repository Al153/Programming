//incomplete
//project to build a parser in CLL


////////////////////////////////////////////////////
//requires malloc to be imported and initialised  //
////////////////////////////////////////////////////


// parsing logic

@int 1024 parseStack = [0];
int parseStackPointer = 1;
@int lookAhead;
@int currentToken;
@int 2 parseAction;  //[0] ==> action; [1] ==> data

@int parse(@int tokens)
	//LR1 parser:
		//tokens passed as a linked list

	lookAhead = tokens;
	while(not(parseStep()))do
		pass;
	loop;
	return parseStack[1];

end;

int parseStep()
	int topState = parseStack[parseStackPointer];
	getNextAction(topState,lookAhead[TERMINAL_TYPE]); 
	if (parseAction[0] == pAction:SHIFT) then
		//shift: push token, push state, get new lookahead
		pPush(lookahead);
		pPush(parseAction[1]);
		lookahead = lookahead[TERMINAL_NEXT];

	else if (parseAction[0] == pAction:REDUCE) then


	else if (parseAction[0] == pAction:DONE)

	else //error

	endif; endif; endif;
end;


// set up rules
#enum pAction [SHIFT,REDUCE,DONE,ERROR]

//type definitions are generated by the parser generator





//classes for parse tree nodes

@int Non_terminal_parse_tree_node(int node_type,@int children)
	@int node = malloc(4);
	node[NT_TYPE] = node_type;
	node[IS_TERMINAL] = 0;
end;

@int Terminal_parse_tree_node(int node_type,@char token_string)
	@int node = malloc(4);
	node[TERMINAL_TYPE] = node_type;
	node[IS_TERMINAL] = 0;
	node[TERMINAL_NEXT] = 0;
	node[TERMINAL_STRING] = newStringCopy(token_string);
end;




//Offsets for node classes
#define IS_TERMINAL 0

#define TERMINAL_TYPE 1
#define TERMINAL_STRING 2
#define TERMINAL_NEXT 3

#define NT_TYPE 1
#define NT_CHILDREN 2

//string and stack tools

@char newStringCopy(@char string)
	//allocs a new space for a string and copies into it
end;

void pPush(int value)
	parseStack[parseStackPointer] = value;
	parseStackPointer += 1;
	if (parseStackPointer==1024) then
		//////////////////////////////////////////
		// ADD error message here				//
		//////////////////////////////////////////
	endif;
end;

int pPop()
	if (parseStackPointer == 0) then
		//////////////////////////////////////////
		// ADD error message here				//
		//////////////////////////////////////////
	endif;
	parseStackPointer -= 1;
	return parseStack[parseStackPointer];
end;


// table lookup functions - to be generated
void getNextAction(int state, int lookAhead_type)
	//finds next action in the lookahead action table
	//puts it into the parseAction array
end;
