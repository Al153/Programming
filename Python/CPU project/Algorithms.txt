Add two 16bit numbers reg0+reg1*256+reg2+reg3*256

169, 103, 170, 2, 171, 167, 172, 1, 0, 2, 117, 128, 171, 1, 1, 2, 147, 1, 3, 189,
0, 190, 1, 148

full multiplication of two 8 bit numbers:

Psuedo code: 
a1 = a%16
b1 = b%16
a2 = a//16
b2 = b//16
s1 = a1*b1
s2 = a2*b2
s3 = a1*b2
s4 = a2*b1
s3 = switch(s3)
s4 = switch(s4
s5 = s3 and 15
s6 = s4 and 15
s7 = s3 and 120
s4 = s4 and 120
s1 = s1+s5+s6
s2 = s2 +s7+s8

assembly code:

[165,0,166,1,171,16,16,2,17,2,189,2,190,3,165,0,
166,1,12,2,13,2,195,200,8,1,189,4,165,2,166,3,10,1,11,0,9,0,62,0,63,0,
190,5,192,7,169,240,170,15,204,22,0,23,1,191,8,192,9,167,7,168,7,22,0,23,1,
191,10,192,11,165,5,166,8,167,10,168,11,0,1,117,128,170,1,3,147,0,2,117,128,
170,1,3,1,147,189,1,165,4,166,9,0,1,0,3,189,0]

length = 108

a[16bit] modulo b[8bit]:

Psuedo code:

a0 = a//256
a1 = a%256
m = b
c = 256%m
a1,a0 = a%m,b%m
while a1:
	a1 -= 1
	a0 +=c
	a0 = a0%m
return a0

assembly code: opcode:
(a1 in 0, a0 in 1, b in 15[for integration into blum blum shub, can be at 2])

load 3		172
255		255
load 2		167
addr 15		15
load 1		170
1		1
mod 3		19
2		2
add3		3
1		1
mod 3		19
2		2
savepc 1	232
load 0		169
15		15
add 1		1
0		0
write 1		190
addr 3		3
load 0		165
addr 0		0
load 1		166
addr 1		1
mod 0		16
2		2
mod 1		17
2		2
if 0 !=		118
data 0		0
load 2		171		
1		1
sub 0		4
2		2
add 1		1
3		3
load 2		167
addr 15		15
mod 1		17
2		2
load 2		167
addr 3		3
jump reg 2	70
end if		147
write 1		190
addr 1		1


[172,255,167,15,170,1,19,2,3,1,19,
 2,232,169,15,1,0,190,3,165,0,166,1,16,2,17,2,118,0,171,1,4,2,1,3,167,
 15,17,2,167,3,70,147,190,1]

length = 45

square(x):

psuedo code:

b = a//16
c = a%16
d = c**2
e = b**2
f = b*c
f = 2*f
if overflow:
	e += 16
f = switch(f)
g = f AND 15
h = f AND 240
s0 = e+h
s1 = d+g

assembly:

load 0		165
addr 0		0
load 1		170
16		16
div 0		12
1		1
write 0		189
addr 1		1
load 0		165
addr 0		0
mod 0		16
1		1
write 0		189
addr 2		2
load 0		165
addr 1		1
load 1		166
addr 2		2
mult 0		8
0		0
mult 1		9
1		1
write 0 	189
addr 3		3
write 1		190
addr 4		4
load 0		165
addr 1		1
load 1		166
addr 2		2
mult 0		8
1		1
add 0		0
0		0
if flags = 	117
data 128	128
load 1		166
addr 3		3
load 2		171
16		16
add 1		1
3		2
write 1		190
addr 3		3
end if		147
switch 0	60	
[0]		0
write 0		189
addr 1		1
load 1		170
240		240
load 2		171
15		15
and 0		20
1		1
write 0		189
addr 2		2
load 0		165
addr 1		1
and 0		20
2		2
load 1		166
addr 2		2
load 2		167
addr 3		3
load 3 		168
addr 4		4
add 1		1
3		3
if flags = 	117
128		128
load 3		172
1		1
add 2		2
3		3
end if		147
add 0		0
2		2
write 0		189
addr 1		0
write 1		190
addr 0		1


[165,0,170,16,12,1,189,1,165,0,16,1,189,2,165,1,166,2,8,0,9,1,189,3,
190,4,165,1,166,2,8,1,0,0,117,128,166,3,171,16,1,2,190,3,147,60,0,189,
1,170,240,171,15,20,1,189,2,165,1,20,2,166,2,167,3,168,4,1,3,117,128,172,1,2,3,
147,0,2,189,0,190,1]

length = 82



Blum Blum Shub (psuedo code)

p = prime
q = prime
seed = prime and != p or q
for i in range 10:
	seed = seed**2 mod pq
	return seed

assembly:

load 0				169
13 #p				2*
load 1				170
19 #q				107*
mult 0				8
1				1
load 1 				170
11 #seed			2*
write 0 			189
addr 15				15
write 1				190
addr 0				0
load 0				169
0				0
load 1				170
10 #length of rand stream	10
write 0				189
addr 16				16
write 1				190
addr 17				17
save pc 0			231
load 1				170
7				7
add 0				0
1				1
write 0 			189
addr 18				18
load 0				165
addr 16				16
load 1				166
addr 17				17
if 0 != 1			124
load 2				171
1				1
add 0				0
2				2
write 0				189
addr 16				16
call: square			165,0,170,16,12,1,189,1,165,0,16,1,189,2,165,1,
				166,2,8,0,9,1,189,3,190,4,165,1,166,2,8,1,0,0,
				117,128,166,3,171,16,1,2,190,3,147,60,0,189,1,
				170,240,171,15,20,1,189,2,165,1,20,2,166,2,167,
				3,168,4,1,3,117,128,172,1,2,3,147,0,2,189,0,190,
				1
			
call: multibyte mod		172,255,167,15,170,1,19,2,3,1,19,2,232,169,15,1,
				0,190,3,165,0,166,1,16,2,17,2,118,0,171,1,4,2,1,
				3,167,15,17,2,167,3,70,147,190,0

load 0				165
addr 16				16
load 1				166
addr 0				0
load 2				171
20				20
add 0				0
2				2
write 1:addr reg 0		177
load 0				165
addr 18				18
jump: reg 0			68
end if				147
halt				148



[169,2,170,107,8,1,170,2,189,15,190,0,169,0,170,100,189,16,190,17,231,
170,7,0,1,189,18,165,16,166,17,124,171,1,0,2,189,16,165,0,170,16,12,1,
189,1,165,0,16,1,189,2,165,1,166,2,8,0,9,1,189,3,190,4,165,1,166,2,8,
1,0,0,117,128,166,3,171,16,1,2,190,3,147,60,0,189,1,170,240,171,15,20,
1,189,2,165,1,20,2,166,2,167,3,168,4,1,3,117,128,172,1,2,3,147,0,2,
189,0,190,1,172,255,167,15,170,1,19,2,3,1,19,2,232,169,15,1,0,190,3,165,
0,166,1,16,2,17,2,118,0,171,1,4,2,1,3,167,15,17,2,167,3,70,147,190,0,
165,16,166,0,171,20,0,2,177,165,18,68,147,148]


Tic Tac Toe

- Machine always goes first and presents player with 
-------
|0|1|2|
-------
|7|X|3|
-------
|6|5|4|
-------

if player choice = 1,3,5,7:
	place O in choice
	choice +=1 mod 8
	place x in choice
	choice += 4 mod 8
	place O in choice
	choice += 6 mod 8
	place X in choice
	choice += 4 mod 8
	place O in choice
	Choice += 2 mod 8
else:
	place O in choice
	choice += 2 mod 8
	place X in choice
	choice += 4 mod 8
	place O in choice
	choice += 1 mod 8
	place X in choice
	choice += 4 mod 8 
	place O in choice
	choice += 2 mod 8
	place X in choice
	choice += 4 mod 8
	place 0 in choice
	choice += 3 mod 8

Assembly:

load 0			169
*User's choice		5*
copy 0 => 1		194
load 2			171
2			2
mod 0			16
2			2
load 2			171
8			8
if reg 0 = 		113
1			1
write 1			190
addr 0			0
load 3			172
1			1
add 1			1
3			3
mod 1			17
2			2
write 1			190
addr 1			1
load 3			172
4			4
add 1			1
3			3
mod 1			17
2			2
write 1			190
addr 2			2
load 3			172
6			6
add 1			1
3			3
mod 1			17
2			2
write 1			190
addr 3			3
load 3			172
4			4
add 1			1
3			3
mod 1			17
2			2
write 1			190
addr 4			4
load 3			172
4			4
add 1			1
3			3
mod 1			17
2			2
write 1			190
addr 5			5
load 3			172
2			2
add 1			1
3			3
mod 1			17
2			2
write 1			190
addr 6			6
halt			148
end			147
write 1			190
0			0
load 3 			172
2			2
add 1			1
3			3
mod 1			17
2			2
write 1			190
addr 1			1
load 3 			172
4			4
add 1			1
3			3
mod 1			17
2			2
write 1			190
addr 2			2
load 3			172
1			1
add 1			1
3			3
mod 1			17
2			2
write 1			190
addr 3			3
load 3			172
4			4
add 1			1
3			3
mod 1			17
2			2
write 1			190
addr 4			4
load 3			172
2			2
add 1			1
3			3
mod 1			17
2			2
write 1			190
addr 5			5
load 3			172
4			4
add 1			1
3			3
mod 1			17
2			2
write 1			190
addr 6			6
load 3			172
3			3
add 1			1
3			3
mod 1			17
2			2
write 1			190
addr 7			7
halt			148
[169,5,194,171,2,16,2,171,8,113,1,190,0,172,1,1,3,17,2,190,1,172,4,1,3,
17,2,190,2,172,6,1,3,17,2,190,3,172,4,1,3,17,2,190,4,172,2,1,3,17,2,190,5,
148,147,190,0,172,2,1,3,17,2,190,1,172,4,1,3,17,2,190,2,172,1,1,3,17,2,
190,3,172,4,1,3,17,2,190,4,172,2,1,3,17,2,190,5,172,4,1,3,17,2,190,6,172,3,
1,3,17,2,190,7,148]



square root (newton's method) (optimised)

load 0		169
X		36
write 0		189
addr 0		0
load 3		172
accuracy	10
load 1		170
2		2
write 1		190
addr 1		1
save pc 0	231
load 1		170
7		7
add 0		0
1		1
write 0		189
addr 4		4
load 0 		165
addr 3		3
if reg 3>	146
0		0
load 0		165
addr 0		0
load 1		166
addr 1		1
div 0		12
1		1
load 1		170
2		2
div 0		12
1		1
load 1		166		
addr 1		1
load 2		171
2		2
div 1		13
2		2
add 0		0
1		1
write 0		189
addr 1		1
load 2		171
1		1
sub 3		7
2		2
load 0		165		
addr 4		4
jump 0		68
end 		147
halt		148


[169,36,189,0,172,10,170,2,190,1,231,170,7,0,1,189,4,165,3,146,0,
165,0,166,1,12,1,170,2,12,1,166,1,171,2,13,2,0,1,189,1,171,1,7,2,
165,4,68,147,148]


Caesar shift

(only on 5.1.2, 100 letters written into page 0, after the key)

[169,1,167,0,172,26,139,101,153,1,2,17,3,190,101,213,101,170,1,0,1,72,6,147,148]