Definitions: routine - a regs only operation, routine(w,x,y,z) => routine operated on value w loaded into reg0,x into reg1 etc.


	     function - an operation requiring it's own memory. called from and run in seperate pages of memory, must be loaded with reg values
	       		when called and returns reg values. In instantiation, function:function(w,x,y,z) w = page of function, x = start, y = end,
			z = page for function memory. Functions are defined after instantiation as a piece of compiled assembly




routines:
	special:
		x + y: [0,1]
		x - y: [4,1]
		x * y: [8,1]
		x / y: [12,1]
		x % y: [16,1]
		x AND y:[20,1]
		x OR y:[24,1]
		x XOR y:[28,1]
		x NAND y:[36,1]
		x NOR y:[40,1]
		x XNOR y:[44,1]
	regular:
		NOT(x):32
		









def root (x:int):{
Instantiate:(try:int;try2:int;accuracy:int;jump_value:int);
map:{
	page 0:{
		[0] <= x;
		[1] <= try;
		[2] <= try2;
		[3] <= accuracy;
		[4] <= jump_value;
	}
}


BEGIN:{
accuracy <= 10;
try <= 2;
while accuracy > 0 [jump value]:{
	try2 <= x / try;
	try2 <= try2 / 2;
	try <= try / 2;	
	try <= try + try2;
	accuracy <= accuracy - 1;
	}
return try;
}
END
}






def mexp (base:int;exponent:int;modulus:int):{


	instantiate:(base:array(8);scratchpad:array(2));
	instantiate:(length:int;length2:int;temp:int;solution:int;jump_value:int);
	instantiate:(multibytemod:function(1,0,42,2);overflowmult:function(1,43,150):
	overflowsquare:function(1,151,228));

	define:{multibyte mod: [172,255,167,15,170,1,19,2,3,1,19,
 			2,232,169,15,1,0,190,3,165,0,166,
			1,16,2,17,2,118,0,171,1,4,2,1,3,167,
 			15,17,2,167,3,70,147];

		overflowmult:	[189,0,190,1,171,16,16,2,17,2,189,2,190,3,165,0,
			166,1,12,2,13,2,195,200,8,1,189,4,165,2,166,3,10,1,11,0,9,0,62,0,63,0,
			190,5,192,7,169,240,170,15,204,22,0,23,1,191,8,192,9,167,7,168,7,22,0,23,1,
			191,10,192,11,165,5,166,8,167,10,168,11,0,1,117,128,170,1,3,147,0,2,117,128,
			170,1,3,1,147,189,1,165,4,166,9,0,1,0,3,166,1];

		overflowsquare: [189,0,170,16,12,1,189,1,165,0,16,1,189,2,165,1,166,2,8,0,9,1,189,3,
			190,4,165,1,166,2,8,1,0,0,117,128,166,3,171,16,1,2,190,3,147,60,0,189,
			1,170,240,171,15,20,1,189,2,165,1,20,2,166,2,167,3,168,4,1,3,117,128,172,1,2,3,
			147,0,2];
		}

		
	map:{
		page 0:{
			[0:1] <= scratchpad;;
			[2] <= modulus;
			[3] <= base;
			[4] <= exponent;
			[5] <= length;
			[6] <= length2;
			[7] <= solution;
			[8] <= jump_value;
			[9:16] <= binary;
		}
	}

	BEGIN:{
	length <= 255;
	length2 <= 255;
	temp <= 2;
	solution <= 1;
	while exponent > 0 [jump_value]:{
		length <= length + 1;
		binary[length] <= exponent % 2;
		exponent <= shift(exponent,1);
		}
	while length2 < length[jump_value]:{
		length2 <= length2 + 1;
		if temp == 0:{
			temp <= base;
			}
		if binary[length2] == 1:{
			scratchpad <= overflowmult(solution,temp);
			temp <= multibytemod(scratchpad,modulus);
			}
		scratchpad <= overflowsquare(temp);
		temp <= multibytemod(scratchpad,modulus);
		}
	length2 <= length2 + 1;
	if temp == 0:{
		temp <= base;
		}
	if binary[length2] == 1:{
		scratchpad <= overflowmult(solution,temp);
		temp <= multibytemod(scratchpad,modulus);
		}
	return solution;

END
}


(on 5.1.2, 100 letters)

def caesarshift(key:int;plaintext:array(100):{
	instantiate:(
			jump_value:int;
			temp:int;
			i:int
			);
	map:{
		page 0:{
			[0] <= key;
			[1:100] <= plaintext;
			[101] <= jump_value;
			[102] <= temp;
			[103] <= i;
		}
	}	
	BEGIN:{
	i = 1;
	while i < 101 [jump_value]:{
		temp = plaintext[i-1];
		temp = temp + key;
		temp = mod(temp,26);
		print(temp);
		}
	}END
}





( for arrays of 8 bytes)
def sort(tosort:array(8)):{
	instantiate:(pointeri:int;
			pointerj:int;
			holderi:int;
			holderj:int;
			temp:int;
			jump_valuei:int;
			jump_valuej:int;
			i:int;
			j:int);
	map:{
		page 0:{
			[0:7] <= tosort;
			[8] <= pointeri;
			[9] <= pointerj;
			[10] <= holderi;
			[11] <= holderj;
			[12] <= temp;
			[13] <= jump_valuei;
			[14] <= jump_valuej;
			[15] <= i;
			[16] <= j;
			}
		}
	BEGIN:{
		
	
		