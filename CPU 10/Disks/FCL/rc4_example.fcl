type rc4Table = {
	int[] array = new int[255];
	int i = 0;
	int j = 0;
}

unit key_schedule(type rc4Table s, char[] key, int keylength){
	
	for (int i = 0; i<256; i = i + 1) s.array[i] = i;
	for (i = 0;i<256;i=i+1){
			int j = (j + s.array[i] + int(key[i%keylength]))&255; //don't need mod 255 because J is a char
			int temp = s.array[i]; //swap s.array[i] and s.array[j]
			s.array[i] = s.array[j];
			s.array[j] = temp;
	}
}


int generate(type rc4Table s){
	s.i = (s.i + 1)&255; //loops when hits 255
	s.j = (s.j + s.array[s.i])&255; //uses @chars to cause side effects - modify outside vars
	temp = s.array[s.i]; //swap s.array[i] and s.array[j]
	s.array[s.i] = s.array[s.j];
	s.array[s.j] = temp;
	return s.array[(s.array[s.i]+s.array[s.j])&255];
}



unit encrypt(char[] plaintext, int length,char key, int keylength){
	type rc4Table s = new type rc4Table;
	key_schedule(s,key,keylength);

	int char_pointer;
	for (int char_pointer = 0;char_pointer < length; char_pointer = char_pointer+1)
		plaintext[char_pointer] = char(int(plaintext[char_pointer])^generate(S));
}