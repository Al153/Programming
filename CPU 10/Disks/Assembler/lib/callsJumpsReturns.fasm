PRINTING -> .( Compiling calling and jumping FASM WORDS...) ;;
	: jmp; // ( address -- )
		pc, SWAP ldi;
	;

	: jmp[]; // ( reg addr -- )
		pc, ROT ldi[];
	;


	// Calling convention
	//
	//    stack grows up		jmp is the stack pointer
	//			.
	//			.
	// 	|	(Next frame)	|
	//	|   Return value    | 	- jmp[-4]
	// 	|-------------------|
	//	|					|  - jmp[0] points to the bottom of this frame. 
	//	|					|  - jmp[4] address to return to in this function
	//	|	Stack pointer	|	
	//	|	Return Address	|
	//	|	return value 	|
	//	|-------------------|
	//			



	: calla; // ( address -- )
		pc, acc, mov;
		acc, 4 8 * # adda;
		jmp;
	;

	: calla[]; // ( indexReg address -- )
		pc, acc, mov;
		acc, 4 8 * # adda;
		jmp[];
	;

	: callr; // ( reg -- )
		pc, acc, mov;
		acc, 4 8 * # adda;
		acc, jmp, 0 sti[];
		pc, mov;
	;

	: funDec; // ( framesize LABEL -- )
		// writes the assembler code which defines a function (builds a stack frame)
		!LABEL
		jmp, SWAP # suba;
	;

	: return; // ( register frameSize  -- )
		jmp, SWAP # adda;
		jmp, -4 sti[]; // takes from previous frame
		jmp, 0 jmp[];
	;

	: saveReg; // ( flag reg --  )
		SWAP DUP { R_STACK -> } >r { ;; } if
			DUP 8 - # jmp, SWAP sti[]; // store the register to its place in the
									   // stack frame (reg addr - 8)
		else
			DROP
		then
	;
	: restReg; // ( reg -- )
		{ R_STACK -> } r> { ;; } 
		if
			DUP 8 - # jmp, SWAP ldi[]; // load the register from the right place in the stack frame
		else DROP then
	;
	: allRegs, 1 1 1 1 1 1 1 1 ; // ( -- [8x 1])
	: fCall; // ( reg1 addr [ 8 * registerSaveFlags ] -- )
			// store the register values into the current stack frame, as directed by the flags.
		gp0, saveReg;
		gp1, saveReg;
		gp2, saveReg;
		gp3, saveReg;
		gp4, saveReg;
		gp5, saveReg;
		gp6, saveReg;
		gp7, saveReg;

		calla; // call the function
		// restore the register values
		gp7, restReg;
		gp6, restReg;
		gp5, restReg;
		gp4, restReg;
		gp3, restReg;
		gp2, restReg;
		gp1, restReg;
		gp0, restReg;

		jmp, -4 ldi[]; // load reg1 with the result of the fCaLL
	;

	: fCall[]; // ( reg1, regIndex, addr [ 8 * registerSaveFlags ] -- )
		gp0, saveReg;
		gp1, saveReg;
		gp2, saveReg;
		gp3, saveReg;
		gp4, saveReg;
		gp5, saveReg;
		gp6, saveReg;
		gp7, saveReg;

		calla[]; // call the function
		// restore the register values
		gp7, restReg;
		gp6, restReg;
		gp5, restReg;
		gp4, restReg;
		gp3, restReg;
		gp2, restReg;
		gp1, restReg;
		gp0, restReg;

		jmp, -4 ldi[]; // load reg1 with the result of the fCaLL
	;
PRINTING -> .( Done!\n) ;;