.( SETTING UP Opcodes... )
// Opcodes
STACKTLS ->
	BYTECODE ->


		: BPUSH // ( stack_item -- )
			DEBUG if 
				dumpStack
			then


			acc, SWAP # ldi;
			acc, pushr;

			DEBUG if
				[ str( \nPushing: ) ] echoKp;
				prntVal;
			then
		;
		
		: BLOOKUPS // ( offset -- )
			DEBUG if
				dumpStack
				[ str( \nLOOKUPS)] echoKp;
			then

			acc, SWAP fp, SWAP CELLS STACK + ldi[];
			acc, pushr;
		;  // lookup in stack with an offset
		
		: BLOOKUPH // ( offset -- )
			DEBUG if
				dumpStack
				[ str( \nLOOKUPH, closure index, closure address = )] echoKp;
			then

			// offset is offset in the closure
			acc, fp, STACK 1 CELLS - ldi[]; // get a pointer to our closure
			acc, acc, HEAPREG ldi[]; // get the reference into the heap from the Heap registry
		
			ClsrChk;
		
			acc, fp, STACK 1 CELLS - ldi[]; // get a pointer to our closure

			DEBUG if
				acc, odr;
				32 # oca;
			then

			acc, acc, HEAPREG ldi[];

			DEBUG if
				acc, odr;
			then

		 	// get particular bound var out of closure
			acc, SWAP acc, SWAP ClsHpPos ldi[]; // pick the var
			acc, pushr;
		;
		
		: BUNARY  // ( unary_oper  -- )
			DEBUG if
				dumpStack
				[ str( \nUNARY)] echoKp;
			then

			DUP U_NOT = if DROP
				0 ts, OTHERS # xora;
		 		// we're using 31 bit ints since we need to distinguish between values and references for the GC to properly run
			else DUP U_NEG = if DROP
				acc, TOPBIT # ldi; // load accumulator with primiive value 0
				acc, 0 ts, subr;
				acc, 0 ts, mov;
				0 ts, TOPBIT # orra;
			else DUP U_READ = if DROP
				readInt;
				acc, 0 ts, mov;
			else
				." ERROR: unrecognised Unary op code: " . CR
			then then then
		;

		
		: BOPER // ( oper -- )
			DEBUG if
				dumpStack
				[ str( OPERAND)] echoKp;
			then

			DUP O_AND = if DROP
				1 ts, 0 ts, andr;
				1 pop
		
			else DUP O_OR = if DROP
				1 ts, 0 ts, orrr;
				1 pop
		
			else DUP O_EQB = if DROP
				acc, TOPBIT # ldi; // 0x80000000 = primitive 0
				1 ts, 0 ts, cmr;
				equ, acc, ONES # cldi; // conditional load
				acc, 1 ts, mov;
				1 pop
		
			else DUP O_EQI = if DROP
				acc, TOPBIT # ldi; // 0x80000000 = primitive 0
				1 ts, 0 ts, cmr;
				equ, acc, ONES # cldi; // conditional load
				acc, 1 ts, mov;
				1 pop
				
			else DUP O_LT = if DROP
				// test if ts[1] < ts[0] 

				// need to account for signs
				acc, TOPBIT # ldi; // 0x80000000 = primitive 0
				temp, SIGNBIT # ldi;
				temp, 1 ts, andr;
				temp, testr, if;
					temp, 0 ts, andr;
					temp, testr, 1 nskip; // skip next instr if signs are equal
							acc, ONES # ldi; // ts[1] signed, ts[0] not -> ts[0] > ts[1], so lt is true
						1 ts, 0 ts, cmr; // if acc is loaded byabove instr, these instrs become degenerate
						les, acc, ONES # cldi;
				else;
					temp, SIGNBIT # ldi;
					temp, 0 ts, andr;
					temp, testr, 2 nskip; // ts[0] signed, ts[1] not -> ts[0] < ts[1] so lt is false, so skip next two
						1 ts, 0 ts, cmr; // otherwise compare
						les, acc, ONES # cldi;
				endif;
				acc, 1 ts, mov;
				1 pop
		
			else DUP O_ADD = if DROP
				1 ts, 0 ts, addr;
				1 ts, TOPBIT # orra; // account for top bit
				
				1 ts, acc, mov;
				1 pop
		
			else DUP O_SUB = if DROP
				1 ts, 0 ts, subr;
				1 ts, TOPBIT # orra; // account for top bit
				
				1 ts, acc, mov;
				1 pop
		
			else DUP O_MUL = if DROP
				1 ts, OTHERS # anda;
				0 ts, OTHERS # anda;

				1 ts, 0 ts, mulr; // temp gets clobbered here
				1 ts, TOPBIT # orra; // account for top bit

				1 ts, acc, mov;
				1 pop
			else
				." ERROR: unrecognised Binary op code: " . CR
			then then then then then then then then

		;
		: BASSIGN //  ( -- )
			DEBUG if 
				dumpStack
				[ str( \nASSIGN)] echoKp;
			then

			acc, 1 ts, HEAPREG ldi[]; // get pointer to ref from the heap registry
		
			t_REF @ TypeChk;
		
			0 ts, acc, HEAP 1 CELLS + sti[];	// do the assignment
			1 ts, TOPBIT # ldi; // push a unit value to the stack // required by type system
			1 pop

		;
		: BSWAP  // ( -- )
			DEBUG if
				dumpStack
				[ str( \nSWAP)] echoKp;
			then

			1 ts, 0 ts, SWAP  xorr;
			1 ts, 0 ts, xorr;
			1 ts, 0 ts, SWAP xorr;
		;
		: BPOP // ( -- )
			DEBUG if
				dumpStack
				[ str( \nPOP)] echoKp;
			then

			1 pop
		; 
		
		// Pair heap definition
		//	Header (type val) - indicates that this is a pair
		//	fst
		//	snd
		
		: BFST // ( -- )
			DEBUG if
				dumpStack
				[ str( \nFST)] echoKp;
			then

			acc, 0 ts, HEAPREG ldi[];
			t_PAIR @ TypeChk;
			0 ts, acc, HEAP 1 CELLS + ldi[]; // load up from the  first part of the index
		;

		: BSND // ( -- )
			DEBUG if
				dumpStack
				[ str( \nSND)] echoKp;
			then

			acc, 0 ts, HEAPREG ldi[];
			t_PAIR @ TypeChk;
			0 ts, acc, HEAP 2 CELLS + ldi[]; // load up from the  first part of the index
		;

		: BDEREF  // ( -- )
			DEBUG if
				dumpStack
				[ str( \nDEREF)] echoKp;
			then

			acc, 0 ts, HEAPREG  ldi[];
			t_REF @ TypeChk;
			0 ts, acc, HEAP 1 CELLS + ldi[]; // load up from the  first part of the index
		;
		: BAPPLY // ( -- )
			DEBUG if
				dumpStack
				[ str( \nAPPLY)] echoKp;
			then

			acc, 0 ts, HEAPREG ldi[]; // check for a closure
		
			ClsrChk;
		
			// Stack Frame
			// *(fp+4) 	ret addr
			// *fp:		previous fp
			// *(fp-4) 	closure ->
			// *(fp-8) 	argument value
		
			// Stack: ( frame ... val closure -- frame ... frame val )
		
			// save closure and val
			1 ts, acc, mov; // val
			0 ts, temp, mov; // closure

	
			2 pop
			// First, push all stack items in registers to memory
			temp, OP_TEMP sti;
				flshRegs // this uses temp so we need to store it temporarily to preserve our closure
				4 expand
			temp, OP_TEMP ldi; // restore temp register

			// construct frame
			acc, 3 ts, mov; // Value
			temp, 2 ts, mov; // closure
			fp, 1 ts, mov; // fp
			0 ts, pc, 14 INSTRS # ldi[]; // retAddr = 14 instructions until after the jump
		
				 		// 11 instrs
				dupFrame // duplicate frame into memory, set new fp

			temp, fp, STACK 1 CELLS - ldi[]; // recover closure reference from the stack
			temp, temp, HEAPREG ldi[]; // dereference via HEAPREG
			pc, temp, HEAP 1 CELLS + ldi[]; // do the jump 
		
			restStck // <- returns to here
		;

		: BRETURN  //  ( -- )

			DEBUG if
				dumpStack
				[ str( \nRETURN)] echoKp;
			then

			TopReg @
				temp, fp, STACK 1 CELLS + ldi[]; // store return addr
				fp, fp, STACK ldi[]; // get old frame
				
				DEBUG if
					dumpStack
				then

				0 ts, acc, mov; // store return value
				5 pop // remove stack frame (return value, return addr, frame addr, closure, and argument)
				acc, pushr;
				4 recentr;

				DEBUG if
					[ str( \n about to jump, temp = )] echoKp;
					temp, odr;
				then

				temp, pc, mov; // jump
			TopReg ! // this should preserve top reg in a conditional return

		;
		
		: BMK_PAIR  //  ( -- )
			DEBUG if
				dumpStack
				[ str( \nMK_PAIR)] echoKp;
			then

			t_PAIR @ heapAllc // allocate a heap object into acc. Temp holds the HeapReg index
			1 ts, acc, HEAP 1 CELLS + sti[]; // fst element
			0 ts, acc, HEAP 2 CELLS + sti[]; // snd element
			temp, 1 ts, mov;
			1 pop

		;
		
		: BMK_INL // ( -- )
			DEBUG if
				dumpStack
				[ str( \nMK_INL)] echoKp;
			then 

			t_SUM @ heapAllc // allocate a heap object into acc. Temp holds the HeapReg index
			0 ts, acc, HEAP 2 CELLS + sti[]; // store value
		
			0 ts, INL_id # ldi; // indicates that this is an INL
			0 ts, acc, HEAP 1 CELLS + sti[]; // store the marker
			
			temp, 0 ts, mov; // "push" the reference

		;

		: BMK_INR // ( -- )
			DEBUG if
				dumpStack
				[ str( \nMK_INR)] echoKp;
			then

			t_SUM @ heapAllc // allocate a heap object into acc. Temp holds the HeapReg index
			0 ts, acc, HEAP 2 CELLS + sti[]; // store value
			
			0 ts, INR_id # ldi; // indicates that this is an INR
			0 ts, acc, HEAP 1 CELLS + sti[]; // store the marker
			
			temp, 0 ts, mov; // "push" the reference
			
		;

		: BMK_REF //  ( -- )
			DEBUG if
				dumpStack
				[ str( \nMK_REF)] echoKp;
			then

			t_REF @ heapAllc // allocate a heap object into acc. Temp holds the HeapReg index
			0 ts, acc, HEAP 1 CELLS + sti[]; // store TOS to i
			temp, 0 ts, mov; 		// "Push" the reference
		;
		
		: BMK_CLOSURE //  ( location length -- )
			DEBUG if
				dumpStack
				[ str( \nMK_CLOSURE) ] echoKp;
			then

			CL_LENGTH !
			CL_LOC !
			// length is closure argument length
			// location is place to jump to for execution
			// need to pop length items into the closure a run time .. complicated
			// t_CLOSURE defined to return an n_closure header when called
			CL_LENGTH @ t_CLOSURE heapAllc // acc = closure obj, temp = Heapreg index

			DEBUG if
				[ str( \nAfter allocation, heapreg index, object = ) ] echoKp;
							temp, odr;
							32 # oca;
							acc, odr;
			then

			temp, OP_TEMP sti; // save temp in O(1) space in data -- can't guarantee any spare registers so have to use this variable

			temp, CL_LOC @ ldi; // Location is a label name

			temp, acc, HEAP 1 CELLS + sti[]; // store the jump location to the header

			temp, CL_LENGTH @ t_CLOSURE # ldi; // header = length * 4
			temp, acc, HEAP 0 CELLS + sti[];
			// acc, OVER, # ldi; // Don't need to store length.. coded by header
			// acc, temp, HEAP 1 CELLS + sti[];
			
			// Can forget about acc now
			DEBUG if
				[ str( \nBefore loop) ] echoKp;
			then

			CL_LENGTH @
			DUP while
				1 - 
				DUP CLSR_PSH // pops n'th value into closure
				
			DUP loop DROP
			CL_LENGTH @ pop // pop n from stack

			temp, OP_TEMP ldi; // restore Heapreg index

			DEBUG if
				[ str( \n After loop, temp(HEAPREG index\) = )] echoKp;
				temp, odr;
			then

			temp, pushr; // push it
		;
		
		: BTEST //    ( location -- )
			DEBUG if
				dumpStack
				[ str( \nTEST)] echoKp;
			then

			0 ts, OTHERS # anda;
			0 ts,
			1 pop
			testr, 1 nskip;
			unc, SWAP bra; 
		;

		: BCASE  //  ( location-- )
			DEBUG if
				dumpStack
				[ str( \nCASE)] echoKp;
			then

			acc, 0 ts, HEAPREG ldi[];
		
			t_SUM @ TypeChk;
		
			temp, acc, HEAP 2 CELLS + ldi[]; // load the value
			temp, pushr; // put it onto stack
		
			acc, acc, HEAP 1 CELLS + ldi[]; // get the marker
			acc, testr, SWAP bra; // if an INR, then goto the label, otherwise stay here
		
		;
		: BGOTO
			DEBUG if
				dumpStack
				[ str( \nGOTO)] echoKp;
			then

			unc, SWAP bra; // TODO: how to deal with topreg 
		; //  ( location -- ) call a function
		: BLABEL // ( labelVar -- ) - labels should be pre declared
			!LABEL
		;
		
		: BHALT // return to forth world, print out result too
			DEBUG if
				dumpStack
				[ str( \nHALT)] echoKp;
			then

			0 ts, acc, mov;
			prntVal;
			unc, FORTHRET bra;
		; 

		: BINIT // ( -- )
			// Extra bytecode for start of program
			SLANG BLABEL

			DEBUG if
				[ str( Arrived in assembler land!\n) ] echoKp;
			then
			// Set up stp
			zro, stp, mov;

			// Program arg arrives in gp0
			// forth return address in jump register: 
			jmp, FORTHRET sti;
			jmp, gp3, mov; // 
			zro, gp2, mov; // old fp = 0
			0 t_CLOSURE heapAllc;
			acc, gp1, mov;

			temp, acc, HEAPREG ldi[];
			zro, temp, HEAP 1 CELLS + sti[]; // store zero length (zero closure) into closure length field

			4 TopReg ! // set TopReg = 4
			dupFrame // duplicate frame into memory
			zro, stp, mov; // reset sp
			DEBUG if
				[ str( Finished init\n)] echoKp;
			then
		;

		: BSTART_F // ( -- )
			// signal the start of a function
			0 TopReg !
		;

		: BEND_F // ( -- )
			0 DROP // do nohing for now
		;

		// If

		: BSTART_E // ( -- n )
			// else branch of an if should start with  BSTART_E and end wit a BEND_E
			TopReg @ // gives current value of TopReg to allow  the true code to the same stuff
			4 recentr;
		;

		: BEND_E // ( -- )
			// all
			4 recentr;
		;

		: BSTART_I // ( -- n )
			// else branch of an if should start with  BSTART_E and end wit a BEND_E
			TopReg ! // store the current "valid" value of topreg
			4 recentr;
		;

		: BEND_I // ( -- )
			// all
			4 recentr;
		;

		: BSTART_W // ( -- )
			0 recentr;
		;

		: BEND_W // ( -- )
			0 recentr;
		;


		: BSTART_R // ( n -- )
			TopReg ! // L and R are like If and Else above but for cases
			1 recentr;
		;

		: BEND_R // ( -- )
			1 recentr;
		;

		: BSTART_L // ( -- n )
			TopReg @
			1 recentr;
		;

		: BEND_L // ( -- )
			1 recentr;
		;

	;;
;;