// Words in the compiled dict.
// some of these are generated by eachother

LABEL: f;
LABEL: fLOCAL:
LABEL: fWHILE
LABEL: fDO:
LABEL: fIF

fLOCAL LABEL!
		// reads in the next word and creates a word named that on the compile dict, which generates assembler  which pushes an address to an alloced variable
		// also pushes a modified ";" word, which deallocates the variable, the word, and both of their code, then calls the next ; word


f; LABEL!
	// simply sets the compile mode flag to 0


fDO LABEL! 
	// writes code that  takes top 3 values on stack (start, end, variable)
	// and generates a for loop

	// creates and adds to the compile dict, a word named "LOOP", which increments the right variable, and tests it, then loops

fWHILE LABEL!
	// creates a custom LOOP word, which does a boolean check on teh TOS and loops if true
	// also needs to create code which runs the boolean check  the first time

fIF LABEL!
	// creates an else and endif word
	