#include STD:string_tools.cll

void key_schedule(@char S, @char key, int keylength)
	int i;
	char j = 0;
	for (i = 0, i<256, i = i + 1)
		S[i] = i;
	loop;
	for (i = 0,i<256,i=i+1)
		j = (j + S[i] + key[i%keylength]); //don't need mod 255 because J is a char

		char temp = S[i]; //swap S[i] and S[j]
		S[i] = S[j];
		S[j] = temp;
	loop;
end;

int generate(@char S, @char i, @char j)
	i[0] = i[0] + 1; //loops when hits 255
	j[0] = j[0] + S[i[0]]; //uses @chars to cause side effects - modify outside vars

	int local_i = i[0];
	int local_j = j[0];

	char temp = S[local_i]; //swap S[i] and S[j]
	S[local_i] = S[local_j];
	S[local_j] = temp;

	return S[S[local_i]+S[local_j]];
end;


void encrypt(@char plaintext, int length, @char key, int keylength)
	@char 256 S;
	key_schedule(S,key,keylength);
	char i = 0;
	char j = 0;
	int char_pointer;
	for (char_pointer = 0,char_pointer < length,char_pointer = char_pointer+1)
		plaintext[char_pointer] = plaintext[char_pointer]^generate(S,@i,@j);
	loop;
end;

void main()
	@char plaintext = "Plaintext";
	int plaintext_length = 9;
	@char key = "Key";
	int keylength = 3;
	encrypt(plaintext,plaintext_length,key,keylength);
	print_hex(plaintext,plaintext_length);	  //from string_tools.cll
end;
